-- ============================================================================
-- SECTION 1: COMPANY & ORGANIZATIONAL STRUCTURE
-- ============================================================================

CREATE TABLE companies (
    company_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(200) NOT NULL,
    address TEXT,
    phone VARCHAR(20),
    email VARCHAR(100),
    tin_vat VARCHAR(50),
    timezone VARCHAR(50) DEFAULT 'Asia/Dhaka',
    base_currency_code VARCHAR(3) DEFAULT 'BDT',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID,
    updated_by UUID,
    deleted_at TIMESTAMP NULL,
    deleted_by UUID
);

CREATE TABLE factories (
    factory_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    company_id UUID NOT NULL REFERENCES companies(company_id),
    factory_code VARCHAR(20) UNIQUE NOT NULL,
    name VARCHAR(200) NOT NULL,
    address TEXT,
    phone VARCHAR(20),
    email VARCHAR(100),
    manager_name VARCHAR(100),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID,
    updated_by UUID,
    deleted_at TIMESTAMP NULL,
    deleted_by UUID
);

CREATE TABLE departments (
    department_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    factory_id UUID NOT NULL REFERENCES factories(factory_id),
    dept_code VARCHAR(20) UNIQUE NOT NULL,
    name VARCHAR(100) NOT NULL,
    cost_center_code VARCHAR(20),
    manager_id UUID, -- FK to users (added after users table)
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID,
    updated_by UUID,
    deleted_at TIMESTAMP NULL,
    deleted_by UUID
);

-- ============================================================================
-- SECTION 2: LOCATION HIERARCHY (Building > Floor > Room > Rack > Bin)
-- ============================================================================

CREATE TABLE locations (
    location_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    factory_id UUID NOT NULL REFERENCES factories(factory_id),
    parent_location_id UUID REFERENCES locations(location_id),
    location_code VARCHAR(50) UNIQUE NOT NULL,
    name VARCHAR(200) NOT NULL,
    location_type VARCHAR(20) NOT NULL CHECK (location_type IN ('WAREHOUSE', 'BUILDING', 'FLOOR', 'ROOM', 'RACK', 'BIN')),
    path TEXT, -- e.g., 'B1/F2/RM05/RK03/BN12'
    capacity_qty NUMERIC(15,3),
    capacity_uom VARCHAR(10),
    depth_level INTEGER DEFAULT 0,
    max_depth INTEGER DEFAULT 5,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID,
    updated_by UUID,
    deleted_at TIMESTAMP NULL,
    deleted_by UUID
);

CREATE INDEX idx_locations_factory ON locations(factory_id);
CREATE INDEX idx_locations_parent ON locations(parent_location_id);
CREATE INDEX idx_locations_path ON locations(path);

-- Location Hierarchy Validation (Added Oct 21, 2025)
CREATE OR REPLACE FUNCTION validate_location_depth()
RETURNS TRIGGER AS $$
DECLARE
    current_depth INTEGER := 0;
    current_parent_id UUID;
BEGIN
    IF NEW.parent_location_id IS NULL THEN
        NEW.depth_level := 0;
        RETURN NEW;
    END IF;
    
    current_parent_id := NEW.parent_location_id;
    current_depth := 1;
    
    WHILE current_parent_id IS NOT NULL AND current_depth < 10 LOOP
        SELECT parent_location_id INTO current_parent_id
        FROM locations WHERE location_id = current_parent_id;
        
        IF current_parent_id IS NOT NULL THEN
            current_depth := current_depth + 1;
        END IF;
    END LOOP;
    
    IF current_depth > 5 THEN
        RAISE EXCEPTION 'Location hierarchy depth cannot exceed 5 levels';
    END IF;
    
    IF NEW.location_id = NEW.parent_location_id THEN
        RAISE EXCEPTION 'Location cannot be its own parent';
    END IF;
    
    NEW.depth_level := current_depth;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_validate_location_depth
BEFORE INSERT OR UPDATE ON locations
FOR EACH ROW EXECUTE FUNCTION validate_location_depth();

-- ============================================================================
-- SECTION 3: USER MANAGEMENT & RBAC
-- ============================================================================

CREATE TABLE users (
    user_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    full_name VARCHAR(100) NOT NULL,
    employee_id VARCHAR(50) UNIQUE,
    phone VARCHAR(20),
    factory_id UUID REFERENCES factories(factory_id),
    department_id UUID REFERENCES departments(department_id),
    is_active BOOLEAN DEFAULT TRUE,
    last_login_at TIMESTAMP,
    last_login_ip VARCHAR(50),
    must_change_password BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID,
    updated_by UUID,
    deleted_at TIMESTAMP NULL,
    deleted_by UUID
);

CREATE TABLE roles (
    role_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    role_name VARCHAR(50) UNIQUE NOT NULL,
    description TEXT,
    is_system_role BOOLEAN DEFAULT FALSE, -- TRUE for SuperAdmin, Auditor, etc.
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE dyeing_bills (
    dyeing_bill_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    bill_no VARCHAR(50) UNIQUE NOT NULL,
    dyeing_party_id UUID NOT NULL REFERENCES suppliers(supplier_id),
    bill_date DATE NOT NULL,
    finish_receipt_id UUID REFERENCES finish_fabric_receipts(finish_receipt_id),
    process_type VARCHAR(50), -- Dyeing, Printing, Washing
    qty_billed NUMERIC(15,3) NOT NULL,
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    rate_per_unit NUMERIC(15,2) NOT NULL,
    currency_id UUID REFERENCES currencies(currency_id),
    total_amount NUMERIC(15,2) NOT NULL,
    status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'APPROVED', 'PAID', 'CANCELLED')),
    approved_by UUID REFERENCES users(user_id),
    approved_at TIMESTAMP,
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================================================================
-- SECTION 3A: STORE-LEVEL ACCESS CONTROL (NEW - Added Oct 21, 2025)
-- ============================================================================

CREATE TABLE store_types (
    store_type_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    store_code VARCHAR(50) UNIQUE NOT NULL,
    store_name VARCHAR(100) NOT NULL,
    description TEXT,
    icon VARCHAR(50), -- For UI
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert default store types
INSERT INTO store_types (store_code, store_name, description) VALUES
('YARN_STORE', 'Yarn Store', 'Yarn inventory management'),
('GRAY_FABRIC_STORE', 'Gray Fabric Store', 'Gray fabric storage and tracking'),
('FINISH_FABRIC_STORE', 'Finish Fabric Store', 'Finished fabric after dyeing'),
('ACCESSORIES_STORE', 'Accessories Store', 'Trims, buttons, zippers, etc.'),
('GENERAL_STORE', 'General Store', 'General consumables and supplies'),
('SPARES_STORE', 'Spare Parts Store', 'Machine parts and spares'),
('IT_STORE', 'IT Store', 'IT equipment and peripherals'),
('MAINTENANCE_STORE', 'Maintenance Store', 'Electrical, plumbing supplies');

CREATE TABLE user_store_access (
    access_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
    store_type_id UUID NOT NULL REFERENCES store_types(store_type_id),
    factory_id UUID NOT NULL REFERENCES factories(factory_id),
    
    -- Granular permissions
    can_view BOOLEAN DEFAULT TRUE,
    can_create BOOLEAN DEFAULT FALSE,
    can_update BOOLEAN DEFAULT FALSE,
    can_delete BOOLEAN DEFAULT FALSE,
    can_approve BOOLEAN DEFAULT FALSE,
    can_issue BOOLEAN DEFAULT FALSE,
    can_receive BOOLEAN DEFAULT FALSE,
    
    assigned_by UUID REFERENCES users(user_id),
    assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    UNIQUE(user_id, store_type_id, factory_id)
);

CREATE INDEX idx_user_store_access_user ON user_store_access(user_id);
CREATE INDEX idx_user_store_access_store ON user_store_access(store_type_id);

-- ============================================================================
-- SECTION 4: MASTER DATA - CURRENCIES, UOMs, CATEGORIES
-- ============================================================================

CREATE TABLE currencies (
    currency_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    currency_code VARCHAR(3) UNIQUE NOT NULL, -- BDT, USD, EUR
    symbol VARCHAR(10),
    name VARCHAR(50),
    is_base_currency BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE exchange_rates (
    exchange_rate_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    from_currency_id UUID NOT NULL REFERENCES currencies(currency_id),
    to_currency_id UUID NOT NULL REFERENCES currencies(currency_id),
    rate NUMERIC(15,6) NOT NULL,
    effective_date DATE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES users(user_id),
    UNIQUE(from_currency_id, to_currency_id, effective_date)
);

CREATE TABLE uoms (
    uom_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    uom_code VARCHAR(10) UNIQUE NOT NULL, -- KG, PCS, MTR, YRD, ROLL
    name VARCHAR(50) NOT NULL,
    description TEXT,
    uom_type VARCHAR(20), -- WEIGHT, LENGTH, QUANTITY, VOLUME
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE item_categories (
    category_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    parent_category_id UUID REFERENCES item_categories(category_id),
    category_code VARCHAR(20) UNIQUE NOT NULL,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    category_type VARCHAR(20), -- YARN, FABRIC, ACCESSORIES, GENERAL, SPARES, IT
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================================================================
-- SECTION 4A: CENTRALIZED STATUS MANAGEMENT (NEW - Added Oct 21, 2025)
-- ============================================================================

CREATE TABLE status_master (
    status_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    entity_type VARCHAR(50) NOT NULL, -- 'PR', 'PO', 'GRN', 'TRANSFER', etc.
    status_code VARCHAR(50) NOT NULL,
    status_label VARCHAR(100) NOT NULL,
    description TEXT,
    sequence INTEGER DEFAULT 0, -- For ordering in workflows
    color_code VARCHAR(7), -- Hex color for UI: #28a745, #ffc107, etc.
    icon VARCHAR(50), -- Icon identifier for UI
    is_active BOOLEAN DEFAULT TRUE,
    is_system_status BOOLEAN DEFAULT FALSE, -- TRUE for statuses that can't be modified
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(entity_type, status_code)
);

-- Insert default statuses for Purchase Requests
INSERT INTO status_master (entity_type, status_code, status_label, sequence, color_code, is_system_status) VALUES
('PR', 'DRAFT', 'Draft', 1, '#6c757d', TRUE),
('PR', 'SUBMITTED', 'Submitted', 2, '#0d6efd', TRUE),
('PR', 'APPROVED', 'Approved', 3, '#28a745', TRUE),
('PR', 'REJECTED', 'Rejected', 4, '#dc3545', TRUE),
('PR', 'CONVERTED_TO_PO', 'Converted to PO', 5, '#20c997', TRUE),
('PR', 'CANCELLED', 'Cancelled', 6, '#6c757d', TRUE);

-- Insert default statuses for Purchase Orders
INSERT INTO status_master (entity_type, status_code, status_label, sequence, color_code, is_system_status) VALUES
('PO', 'DRAFT', 'Draft', 1, '#6c757d', TRUE),
('PO', 'SUBMITTED', 'Submitted', 2, '#0d6efd', TRUE),
('PO', 'APPROVED', 'Approved', 3, '#28a745', TRUE),
('PO', 'SENT_TO_SUPPLIER', 'Sent to Supplier', 4, '#17a2b8', TRUE),
('PO', 'PARTIALLY_RECEIVED', 'Partially Received', 5, '#ffc107', TRUE),
('PO', 'FULLY_RECEIVED', 'Fully Received', 6, '#28a745', TRUE),
('PO', 'CLOSED', 'Closed', 7, '#6c757d', TRUE),
('PO', 'CANCELLED', 'Cancelled', 8, '#dc3545', TRUE);

-- Insert statuses for other entity types (GRN, TRANSFER, ISSUE, etc.) as needed

-- ============================================================================
-- SECTION 5: ITEM MASTER & RELATED TABLES
-- ============================================================================

CREATE TABLE items (
    item_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    sku VARCHAR(50) UNIQUE NOT NULL, -- e.g., YARN-001, FAB-0012, ZIP-0054
    item_name VARCHAR(200) NOT NULL,
    description TEXT,
    category_id UUID NOT NULL REFERENCES item_categories(category_id),
    brand VARCHAR(100),
    manufacturer VARCHAR(100),
    default_uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    
    -- Stock Control
    reorder_level NUMERIC(15,3) DEFAULT 0,
    safety_stock NUMERIC(15,3) DEFAULT 0,
    min_stock_qty NUMERIC(15,3) DEFAULT 0,
    max_stock_qty NUMERIC(15,3),
    lead_time_days INTEGER DEFAULT 0,
    
    -- Attributes
    is_serialized BOOLEAN DEFAULT FALSE,
    is_batch_controlled BOOLEAN DEFAULT FALSE,
    is_asset BOOLEAN DEFAULT FALSE,
    is_consumable BOOLEAN DEFAULT TRUE,
    shelf_life_days INTEGER, -- For expirable items
    
    -- Valuation
    valuation_method VARCHAR(20) DEFAULT 'FIFO' CHECK (valuation_method IN ('FIFO', 'AVERAGE', 'STANDARD')),
    last_purchase_price NUMERIC(15,2),
    avg_purchase_price NUMERIC(15,2),
    standard_cost NUMERIC(15,2),
    
    -- Compliance
    hsn_code VARCHAR(20), -- For tax/customs in Bangladesh
    
    -- Status
    is_active BOOLEAN DEFAULT TRUE,
    discontinued_date DATE,
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES users(user_id),
    updated_by UUID REFERENCES users(user_id),
    deleted_at TIMESTAMP NULL,
    deleted_by UUID REFERENCES users(user_id)
);

CREATE INDEX idx_items_sku ON items(sku);
CREATE INDEX idx_items_category ON items(category_id);
CREATE INDEX idx_items_active ON items(is_active);

CREATE TABLE item_uom_conversions (
    conversion_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    item_id UUID NOT NULL REFERENCES items(item_id) ON DELETE CASCADE,
    from_uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    to_uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    conversion_factor NUMERIC(15,6) NOT NULL, -- e.g., 1 ROLL = 40 MTR
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(item_id, from_uom_id, to_uom_id)
);

-- ============================================================================
-- SECTION 6: SUPPLIERS & ITEM-SUPPLIER MAPPING
-- ============================================================================

CREATE TABLE suppliers (
    supplier_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    supplier_code VARCHAR(20) UNIQUE NOT NULL,
    name VARCHAR(200) NOT NULL,
    contact_person VARCHAR(100),
    phone VARCHAR(20),
    email VARCHAR(100),
    address TEXT,
    city VARCHAR(100),
    country VARCHAR(50) DEFAULT 'Bangladesh',
    tin_vat VARCHAR(50),
    payment_terms VARCHAR(100), -- e.g., '30 days', 'Advance', 'LC'
    credit_limit NUMERIC(15,2),
    currency_id UUID REFERENCES currencies(currency_id),
    supplier_type VARCHAR(50), -- YARN, FABRIC, ACCESSORIES, GENERAL
    is_active BOOLEAN DEFAULT TRUE,
    rating NUMERIC(3,2), -- 0.00 to 5.00
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES users(user_id),
    updated_by UUID REFERENCES users(user_id),
    deleted_at TIMESTAMP NULL,
    deleted_by UUID REFERENCES users(user_id)
);

CREATE TABLE item_suppliers (
    item_supplier_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    item_id UUID NOT NULL REFERENCES items(item_id) ON DELETE CASCADE,
    supplier_id UUID NOT NULL REFERENCES suppliers(supplier_id) ON DELETE CASCADE,
    lead_time_days INTEGER DEFAULT 0,
    min_order_qty NUMERIC(15,3),
    last_purchase_price NUMERIC(15,2),
    last_purchase_date DATE,
    is_preferred BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(item_id, supplier_id)
);

CREATE TABLE supplier_evaluations (
    evaluation_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    supplier_id UUID NOT NULL REFERENCES suppliers(supplier_id),
    evaluation_date DATE NOT NULL,
    on_time_delivery_score NUMERIC(3,2), -- 0-5
    quality_score NUMERIC(3,2), -- 0-5
    price_competitiveness_score NUMERIC(3,2), -- 0-5
    communication_score NUMERIC(3,2), -- 0-5
    overall_rating NUMERIC(3,2), -- 0-5
    remarks TEXT,
    evaluated_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================================================================
-- SECTION 7: BUYERS, STYLES, COLORS, SIZES (RMG Specific)
-- ============================================================================

CREATE TABLE buyers (
    buyer_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    buyer_code VARCHAR(20) UNIQUE NOT NULL,
    name VARCHAR(200) NOT NULL,
    contact_person VARCHAR(100),
    phone VARCHAR(20),
    email VARCHAR(100),
    address TEXT,
    country VARCHAR(50),
    payment_terms VARCHAR(100),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES users(user_id),
    updated_by UUID REFERENCES users(user_id),
    deleted_at TIMESTAMP NULL,
    deleted_by UUID REFERENCES users(user_id)
);

CREATE TABLE styles (
    style_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    buyer_id UUID NOT NULL REFERENCES buyers(buyer_id),
    style_code VARCHAR(50) UNIQUE NOT NULL,
    style_name VARCHAR(200) NOT NULL,
    description TEXT,
    season VARCHAR(50), -- e.g., 'Spring 2025', 'Winter 2024'
    garment_type VARCHAR(50), -- T-Shirt, Trouser, Jacket, etc.
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES users(user_id),
    updated_by UUID REFERENCES users(user_id),
    deleted_at TIMESTAMP NULL,
    deleted_by UUID REFERENCES users(user_id)
);

CREATE TABLE colors (
    color_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    color_code VARCHAR(20) UNIQUE NOT NULL,
    color_name VARCHAR(100) NOT NULL,
    pantone_code VARCHAR(20),
    hex_code VARCHAR(7), -- e.g., #FF5733
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE sizes (
    size_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    size_code VARCHAR(10) UNIQUE NOT NULL, -- XS, S, M, L, XL, XXL
    description VARCHAR(50),
    sequence INTEGER, -- For sorting
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================================================================
-- SECTION 8: WORK ORDERS (PRODUCTION ORDERS)
-- ============================================================================

CREATE TABLE work_orders (
    work_order_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    wo_number VARCHAR(50) UNIQUE NOT NULL,
    buyer_id UUID NOT NULL REFERENCES buyers(buyer_id),
    style_id UUID NOT NULL REFERENCES styles(style_id),
    po_number VARCHAR(100) NOT NULL, -- Buyer's PO number
    factory_id UUID NOT NULL REFERENCES factories(factory_id),
    order_date DATE NOT NULL,
    delivery_date DATE NOT NULL,
    order_qty INTEGER NOT NULL,
    status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED')),
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES users(user_id),
    updated_by UUID REFERENCES users(user_id),
    deleted_at TIMESTAMP NULL,
    deleted_by UUID REFERENCES users(user_id)
);

CREATE TABLE wo_size_breakdowns (
    breakdown_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    work_order_id UUID NOT NULL REFERENCES work_orders(work_order_id) ON DELETE CASCADE,
    size_id UUID NOT NULL REFERENCES sizes(size_id),
    quantity INTEGER NOT NULL,
    UNIQUE(work_order_id, size_id)
);

CREATE TABLE wo_color_breakdowns (
    breakdown_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    work_order_id UUID NOT NULL REFERENCES work_orders(work_order_id) ON DELETE CASCADE,
    color_id UUID NOT NULL REFERENCES colors(color_id),
    quantity INTEGER NOT NULL,
    UNIQUE(work_order_id, color_id)
);

CREATE TABLE wo_yarn_requirements (
    requirement_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    work_order_id UUID NOT NULL REFERENCES work_orders(work_order_id) ON DELETE CASCADE,
    item_id UUID NOT NULL REFERENCES items(item_id), -- Yarn item
    required_qty NUMERIC(15,3) NOT NULL,
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    allocated_qty NUMERIC(15,3) DEFAULT 0,
    issued_qty NUMERIC(15,3) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE wo_accessories_requirements (
    requirement_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    work_order_id UUID NOT NULL REFERENCES work_orders(work_order_id) ON DELETE CASCADE,
    item_id UUID NOT NULL REFERENCES items(item_id), -- Accessory item
    color_id UUID REFERENCES colors(color_id),
    size_id UUID REFERENCES sizes(size_id),
    required_qty NUMERIC(15,3) NOT NULL,
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    allocated_qty NUMERIC(15,3) DEFAULT 0,
    issued_qty NUMERIC(15,3) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================================================================
-- SECTION 9: YARN STORE OPERATIONS
-- ============================================================================

CREATE TABLE yarn_allocations (
    allocation_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    work_order_id UUID NOT NULL REFERENCES work_orders(work_order_id),
    item_id UUID NOT NULL REFERENCES items(item_id), -- Yarn item
    allocated_qty NUMERIC(15,3) NOT NULL,
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    allocated_date DATE NOT NULL,
    allocated_by UUID REFERENCES users(user_id),
    status VARCHAR(20) DEFAULT 'ALLOCATED' CHECK (status IN ('ALLOCATED', 'ISSUED', 'CANCELLED')),
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE yarn_issues (
    yarn_issue_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    yarn_issue_no VARCHAR(50) UNIQUE NOT NULL,
    allocation_id UUID REFERENCES yarn_allocations(allocation_id),
    work_order_id UUID REFERENCES work_orders(work_order_id),
    issue_type VARCHAR(20) NOT NULL CHECK (issue_type IN ('KNITTING_INTERNAL', 'KNITTING_EXTERNAL', 'SAMPLE', 'ADDITIONAL')),
    issue_date DATE NOT NULL,
    factory_id UUID REFERENCES factories(factory_id),
    knitting_party_id UUID REFERENCES suppliers(supplier_id), -- For external knitting
    issued_by UUID REFERENCES users(user_id),
    approved_by UUID REFERENCES users(user_id),
    status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'APPROVED', 'ISSUED', 'RETURNED')),
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE yarn_issue_lines (
    yarn_issue_line_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    yarn_issue_id UUID NOT NULL REFERENCES yarn_issues(yarn_issue_id) ON DELETE CASCADE,
    item_id UUID NOT NULL REFERENCES items(item_id),
    lot_number VARCHAR(50),
    issued_qty NUMERIC(15,3) NOT NULL,
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    location_id UUID REFERENCES locations(location_id),
    remarks TEXT
);

CREATE TABLE yarn_gate_passes (
    gate_pass_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    gate_pass_no VARCHAR(50) UNIQUE NOT NULL,
    yarn_issue_id UUID NOT NULL REFERENCES yarn_issues(yarn_issue_id),
    gate_pass_date DATE NOT NULL,
    vehicle_no VARCHAR(50),
    driver_name VARCHAR(100),
    driver_phone VARCHAR(20),
    expected_return_date DATE,
    actual_return_date DATE,
    issued_by UUID REFERENCES users(user_id),
    approved_by UUID REFERENCES users(user_id),
    security_checked_by UUID REFERENCES users(user_id),
    status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'APPROVED', 'OUT', 'RETURNED')),
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE knitting_programs (
    program_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    program_no VARCHAR(50) UNIQUE NOT NULL,
    work_order_id UUID NOT NULL REFERENCES work_orders(work_order_id),
    yarn_issue_id UUID REFERENCES yarn_issues(yarn_issue_id),
    knitting_party_id UUID REFERENCES suppliers(supplier_id),
    program_date DATE NOT NULL,
    planned_qty NUMERIC(15,3) NOT NULL,
    actual_qty NUMERIC(15,3) DEFAULT 0,
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED')),
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================================================================
-- SECTION 10: GRAY FABRIC STORE OPERATIONS
-- ============================================================================

CREATE TABLE gray_fabric_receipts (
    gray_receipt_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    gray_receipt_no VARCHAR(50) UNIQUE NOT NULL,
    yarn_issue_id UUID REFERENCES yarn_issues(yarn_issue_id),
    knitting_program_id UUID REFERENCES knitting_programs(program_id),
    work_order_id UUID REFERENCES work_orders(work_order_id),
    knitting_party_id UUID REFERENCES suppliers(supplier_id),
    receipt_date DATE NOT NULL,
    received_qty NUMERIC(15,3) NOT NULL,
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    roll_count INTEGER,
    location_id UUID REFERENCES locations(location_id),
    received_by UUID REFERENCES users(user_id),
    inspection_status VARCHAR(20) DEFAULT 'PENDING' CHECK (inspection_status IN ('PENDING', 'PASS', 'FAIL', 'HOLD')),
    inspected_by UUID REFERENCES users(user_id),
    inspected_at TIMESTAMP,
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE gray_fabric_inspections (
    inspection_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    gray_receipt_id UUID NOT NULL REFERENCES gray_fabric_receipts(gray_receipt_id),
    inspection_date DATE NOT NULL,
    inspected_by UUID REFERENCES users(user_id),
    total_points INTEGER DEFAULT 0,
    grade VARCHAR(10), -- A, B, C, Reject
    defects JSONB, -- [{defect_type: 'hole', count: 5, severity: 'major'}, ...]
    pass_qty NUMERIC(15,3),
    reject_qty NUMERIC(15,3),
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE gray_fabric_issues (
    gray_issue_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    gray_issue_no VARCHAR(50) UNIQUE NOT NULL,
    gray_receipt_id UUID REFERENCES gray_fabric_receipts(gray_receipt_id),
    work_order_id UUID REFERENCES work_orders(work_order_id),
    dyeing_factory_id UUID REFERENCES suppliers(supplier_id),
    issue_date DATE NOT NULL,
    issued_qty NUMERIC(15,3) NOT NULL,
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    roll_count INTEGER,
    issued_by UUID REFERENCES users(user_id),
    approved_by UUID REFERENCES users(user_id),
    status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'APPROVED', 'ISSUED', 'RECEIVED_AT_DYEING')),
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE knitting_bills (
    knitting_bill_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    bill_no VARCHAR(50) UNIQUE NOT NULL,
    knitting_party_id UUID NOT NULL REFERENCES suppliers(supplier_id),
    bill_date DATE NOT NULL,
    gray_receipt_id UUID REFERENCES gray_fabric_receipts(gray_receipt_id),
    qty_billed NUMERIC(15,3) NOT NULL,
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    rate_per_unit NUMERIC(15,2) NOT NULL,
    currency_id UUID REFERENCES currencies(currency_id),
    total_amount NUMERIC(15,2) NOT NULL,
    status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'APPROVED', 'PAID', 'CANCELLED')),
    approved_by UUID REFERENCES users(user_id),
    approved_at TIMESTAMP,
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================================================================
-- SECTION 11: FINISH FABRIC STORE OPERATIONS
-- ============================================================================

CREATE TABLE finish_fabric_receipts (
    finish_receipt_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    finish_receipt_no VARCHAR(50) UNIQUE NOT NULL,
    gray_issue_id UUID REFERENCES gray_fabric_issues(gray_issue_id),
    work_order_id UUID REFERENCES work_orders(work_order_id),
    dyeing_party_id UUID REFERENCES suppliers(supplier_id),
    color_id UUID REFERENCES colors(color_id),
    batch_no VARCHAR(50),
    lot_no VARCHAR(50),
    receipt_date DATE NOT NULL,
    received_qty NUMERIC(15,3) NOT NULL,
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    roll_count INTEGER,
    location_id UUID REFERENCES locations(location_id),
    process_type VARCHAR(50), -- Dyeing, Printing, Washing, etc.
    received_by UUID REFERENCES users(user_id),
    qc_status VARCHAR(20) DEFAULT 'PENDING' CHECK (qc_status IN ('PENDING', 'PASS', 'FAIL', 'REWORK')),
    qc_by UUID REFERENCES users(user_id),
    qc_at TIMESTAMP,
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE finish_fabric_issues (
    finish_issue_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    finish_issue_no VARCHAR(50) UNIQUE NOT NULL,
    finish_receipt_id UUID REFERENCES finish_fabric_receipts(finish_receipt_id),
    work_order_id UUID REFERENCES work_orders(work_order_id),
    requisition_id UUID, -- FK to cutting_requisitions (if implemented later)
    issue_type VARCHAR(20) DEFAULT 'CUTTING' CHECK (issue_type IN ('CUTTING', 'SAMPLE', 'REWORK', 'LEFTOVER')),
    issue_date DATE NOT NULL,
    issued_qty NUMERIC(15,3) NOT NULL,
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    issued_by UUID REFERENCES users(user_id),
    approved_by UUID REFERENCES users(user_id),
    status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'APPROVED', 'ISSUED')),
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE fabric_leftover (
    leftover_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    work_order_id UUID REFERENCES work_orders(work_order_id),
    finish_receipt_id UUID REFERENCES finish_fabric_receipts(finish_receipt_id),
    item_id UUID REFERENCES items(item_id),
    color_id UUID REFERENCES colors(color_id),
    leftover_qty NUMERIC(15,3) NOT NULL,
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    location_id UUID REFERENCES locations(location_id),
    reason VARCHAR(50), -- 'Excess Production', 'Order Cancelled', 'Fabric Return'
    stored_date DATE NOT NULL,
    status VARCHAR(20) DEFAULT 'STORED' CHECK (status IN ('STORED', 'SOLD', 'SCRAPPED', 'REUSED')),
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================================================================
-- SECTION 12: PROCUREMENT - REQUISITIONS, PURCHASE ORDERS, GRN
-- ============================================================================

CREATE TABLE purchase_requests (
    pr_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    pr_number VARCHAR(50) UNIQUE NOT NULL,
    requester_id UUID NOT NULL REFERENCES users(user_id),
    department_id UUID REFERENCES departments(department_id),
    factory_id UUID NOT NULL REFERENCES factories(factory_id),
    request_type VARCHAR(20) DEFAULT 'EXTERNAL' CHECK (request_type IN ('EXTERNAL', 'INTERNAL')),
    request_date DATE NOT NULL,
    required_by_date DATE,
    priority VARCHAR(20) DEFAULT 'NORMAL' CHECK (priority IN ('LOW', 'NORMAL', 'HIGH', 'URGENT')),
    status VARCHAR(20) DEFAULT 'DRAFT' CHECK (status IN ('DRAFT', 'SUBMITTED', 'APPROVED', 'REJECTED', 'CONVERTED_TO_PO', 'CANCELLED')),
    justification TEXT,
    total_estimated_value NUMERIC(15,2),
    currency_id UUID REFERENCES currencies(currency_id),
    approved_by UUID REFERENCES users(user_id),
    approved_at TIMESTAMP,
    rejection_reason TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES users(user_id),
    updated_by UUID REFERENCES users(user_id),
    deleted_at TIMESTAMP NULL,
    deleted_by UUID REFERENCES users(user_id)
);

CREATE TABLE purchase_request_lines (
    pr_line_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    pr_id UUID NOT NULL REFERENCES purchase_requests(pr_id) ON DELETE CASCADE,
    item_id UUID NOT NULL REFERENCES items(item_id),
    requested_qty NUMERIC(15,3) NOT NULL,
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    estimated_unit_price NUMERIC(15,2),
    estimated_total NUMERIC(15,2),
    required_by_date DATE,
    specification TEXT,
    justification TEXT,
    status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'APPROVED', 'REJECTED', 'CONVERTED')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE purchase_orders (
    po_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    po_number VARCHAR(50) UNIQUE NOT NULL,
    pr_id UUID REFERENCES purchase_requests(pr_id),
    supplier_id UUID NOT NULL REFERENCES suppliers(supplier_id),
    factory_id UUID NOT NULL REFERENCES factories(factory_id),
    po_date DATE NOT NULL,
    delivery_date DATE NOT NULL,
    payment_terms VARCHAR(100),
    delivery_address TEXT,
    status VARCHAR(20) DEFAULT 'DRAFT' CHECK (status IN ('DRAFT', 'SUBMITTED', 'APPROVED', 'SENT_TO_SUPPLIER', 'PARTIALLY_RECEIVED', 'FULLY_RECEIVED', 'CLOSED', 'CANCELLED')),
    total_amount NUMERIC(15,2) NOT NULL,
    currency_id UUID NOT NULL REFERENCES currencies(currency_id),
    exchange_rate NUMERIC(15,6) DEFAULT 1.0,
    total_amount_bdt NUMERIC(15,2), -- Converted to BDT
    vat_percentage NUMERIC(5,2) DEFAULT 0,
    vat_amount NUMERIC(15,2) DEFAULT 0,
    tax_percentage NUMERIC(5,2) DEFAULT 0,
    tax_amount NUMERIC(15,2) DEFAULT 0,
    discount_percentage NUMERIC(5,2) DEFAULT 0,
    discount_amount NUMERIC(15,2) DEFAULT 0,
    grand_total NUMERIC(15,2),
    terms_and_conditions TEXT,
    created_by UUID REFERENCES users(user_id),
    approved_by UUID REFERENCES users(user_id),
    approved_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL,
    deleted_by UUID REFERENCES users(user_id)
);

CREATE TABLE purchase_order_lines (
    po_line_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    po_id UUID NOT NULL REFERENCES purchase_orders(po_id) ON DELETE CASCADE,
    pr_line_id UUID REFERENCES purchase_request_lines(pr_line_id),
    item_id UUID NOT NULL REFERENCES items(item_id),
    ordered_qty NUMERIC(15,3) NOT NULL,
    received_qty NUMERIC(15,3) DEFAULT 0,
    pending_qty NUMERIC(15,3) NOT NULL, -- Auto calculated: ordered_qty - received_qty
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    unit_price NUMERIC(15,2) NOT NULL,
    total_price NUMERIC(15,2) NOT NULL,
    delivery_date DATE,
    specification TEXT,
    status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'PARTIALLY_RECEIVED', 'FULLY_RECEIVED', 'CLOSED')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE goods_received_notes (
    grn_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    grn_number VARCHAR(50) UNIQUE NOT NULL,
    po_id UUID REFERENCES purchase_orders(po_id),
    supplier_id UUID NOT NULL REFERENCES suppliers(supplier_id),
    factory_id UUID NOT NULL REFERENCES factories(factory_id),
    grn_date DATE NOT NULL,
    received_by UUID NOT NULL REFERENCES users(user_id),
    received_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    delivery_challan_no VARCHAR(50),
    delivery_challan_date DATE,
    vehicle_no VARCHAR(50),
    transporter_name VARCHAR(100),
    qc_status VARCHAR(20) DEFAULT 'PENDING' CHECK (qc_status IN ('PENDING', 'IN_PROGRESS', 'PASSED', 'REJECTED', 'PARTIAL')),
    qc_by UUID REFERENCES users(user_id),
    qc_at TIMESTAMP,
    total_value NUMERIC(15,2),
    currency_id UUID REFERENCES currencies(currency_id),
    status VARCHAR(20) DEFAULT 'DRAFT' CHECK (status IN ('DRAFT', 'SUBMITTED', 'QC_PENDING', 'ACCEPTED', 'REJECTED', 'POSTED')),
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES users(user_id),
    updated_by UUID REFERENCES users(user_id),
    deleted_at TIMESTAMP NULL,
    deleted_by UUID REFERENCES users(user_id)
);

CREATE TABLE grn_lines (
    grn_line_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    grn_id UUID NOT NULL REFERENCES goods_received_notes(grn_id) ON DELETE CASCADE,
    po_line_id UUID REFERENCES purchase_order_lines(po_line_id),
    item_id UUID NOT NULL REFERENCES items(item_id),
    ordered_qty NUMERIC(15,3), -- From PO
    received_qty NUMERIC(15,3) NOT NULL,
    accepted_qty NUMERIC(15,3) DEFAULT 0,
    rejected_qty NUMERIC(15,3) DEFAULT 0,
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    unit_price NUMERIC(15,2) NOT NULL,
    total_price NUMERIC(15,2) NOT NULL,
    batch_no VARCHAR(50),
    lot_no VARCHAR(50),
    serial_no VARCHAR(50),
    manufacture_date DATE,
    expiry_date DATE,
    location_id UUID REFERENCES locations(location_id),
    qc_status VARCHAR(20) DEFAULT 'PENDING' CHECK (qc_status IN ('PENDING', 'ACCEPTED', 'REJECTED', 'HOLD')),
    qc_remarks TEXT,
    rejection_reason TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE qc_inspections (
    qc_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    grn_id UUID NOT NULL REFERENCES goods_received_notes(grn_id),
    inspection_date DATE NOT NULL,
    inspector_id UUID NOT NULL REFERENCES users(user_id),
    inspection_type VARCHAR(50), -- Visual, Dimensional, Functional, Lab Test
    overall_status VARCHAR(20) NOT NULL CHECK (overall_status IN ('PASS', 'FAIL', 'CONDITIONAL_PASS', 'HOLD')),
    defects_found JSONB, -- [{defect: 'color shade', severity: 'major', qty: 10}, ...]
    test_results JSONB, -- Lab test results if applicable
    remarks TEXT,
    attachments JSONB, -- [{file_name, file_path, file_size}, ...]
    approved_by UUID REFERENCES users(user_id),
    approved_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================================================================
-- SECTION 13: INVOICES & PAYMENTS
-- ============================================================================

CREATE TABLE invoices (
    invoice_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    invoice_number VARCHAR(50) UNIQUE NOT NULL,
    po_id UUID REFERENCES purchase_orders(po_id),
    grn_id UUID REFERENCES goods_received_notes(grn_id),
    supplier_id UUID NOT NULL REFERENCES suppliers(supplier_id),
    invoice_date DATE NOT NULL,
    due_date DATE NOT NULL,
    invoice_amount NUMERIC(15,2) NOT NULL,
    currency_id UUID REFERENCES currencies(currency_id),
    vat_amount NUMERIC(15,2) DEFAULT 0,
    tax_amount NUMERIC(15,2) DEFAULT 0,
    discount_amount NUMERIC(15,2) DEFAULT 0,
    total_amount NUMERIC(15,2) NOT NULL,
    paid_amount NUMERIC(15,2) DEFAULT 0,
    balance_amount NUMERIC(15,2) NOT NULL,
    status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'APPROVED', 'PARTIALLY_PAID', 'PAID', 'OVERDUE', 'CANCELLED')),
    payment_terms VARCHAR(100),
    verified_by UUID REFERENCES users(user_id),
    verified_at TIMESTAMP,
    remarks TEXT,
    attachments JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES users(user_id),
    updated_by UUID REFERENCES users(user_id)
);

-- ============================================================================
-- SECTION 14: STOCK MANAGEMENT - BATCHES, MOVEMENTS, BALANCE
-- ============================================================================

CREATE TABLE stock_batches (
    batch_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    item_id UUID NOT NULL REFERENCES items(item_id),
    batch_no VARCHAR(50) NOT NULL,
    lot_no VARCHAR(50),
    location_id UUID NOT NULL REFERENCES locations(location_id),
    grn_line_id UUID REFERENCES grn_lines(grn_line_id),
    manufacture_date DATE,
    expiry_date DATE,
    qty_received NUMERIC(15,3) NOT NULL,
    qty_on_hand NUMERIC(15,3) NOT NULL,
    qty_allocated NUMERIC(15,3) DEFAULT 0,
    qty_available NUMERIC(15,3), -- qty_on_hand - qty_allocated
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    unit_cost NUMERIC(15,2) NOT NULL,
    total_value NUMERIC(15,2) NOT NULL,
    status VARCHAR(20) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'QUARANTINE', 'EXPIRED', 'CONSUMED', 'DISPOSED')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(item_id, batch_no, location_id)
);

CREATE INDEX idx_stock_batches_item ON stock_batches(item_id);
CREATE INDEX idx_stock_batches_location ON stock_batches(location_id);
CREATE INDEX idx_stock_batches_expiry ON stock_batches(expiry_date) WHERE expiry_date IS NOT NULL;

CREATE TABLE stock_movements (
    movement_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    item_id UUID NOT NULL REFERENCES items(item_id),
    from_location_id UUID REFERENCES locations(location_id),
    to_location_id UUID REFERENCES locations(location_id),
    movement_type VARCHAR(20) NOT NULL CHECK (movement_type IN (
        'PURCHASE_IN', 'ISSUE_OUT', 'TRANSFER', 'ADJUSTMENT_IN', 
        'ADJUSTMENT_OUT', 'RETURN_IN', 'RETURN_OUT', 'SCRAP', 
        'PRODUCTION_IN', 'PRODUCTION_OUT', 'DAMAGE', 'THEFT'
    )),
    reference_type VARCHAR(50), -- 'GRN', 'PO', 'ISSUE', 'TRANSFER', 'ADJUSTMENT'
    reference_id UUID, -- ID of the reference document
    reference_number VARCHAR(50), -- Human-readable reference
    batch_id UUID REFERENCES stock_batches(batch_id),
    serial_no VARCHAR(50),
    quantity NUMERIC(15,3) NOT NULL,
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    unit_cost NUMERIC(15,2),
    total_value NUMERIC(15,2),
    fiscal_year INTEGER,
    fiscal_month INTEGER,
    transaction_date DATE NOT NULL,
    transaction_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID NOT NULL REFERENCES users(user_id),
    approved_by UUID REFERENCES users(user_id),
    approved_at TIMESTAMP,
    reason_code VARCHAR(50),
    remarks TEXT,
    is_reversed BOOLEAN DEFAULT FALSE,
    reversed_by UUID REFERENCES users(user_id),
    reversed_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_stock_movements_item ON stock_movements(item_id);
CREATE INDEX idx_stock_movements_date ON stock_movements(transaction_date);
CREATE INDEX idx_stock_movements_type ON stock_movements(movement_type);
CREATE INDEX idx_stock_movements_from_location ON stock_movements(from_location_id);
CREATE INDEX idx_stock_movements_to_location ON stock_movements(to_location_id);
CREATE INDEX idx_stock_movements_reference ON stock_movements(reference_type, reference_id);

-- Materialized View for Stock Balance (refreshed via trigger or scheduled job)
CREATE MATERIALIZED VIEW stock_balance AS
SELECT 
    item_id,
    location_id,
    batch_id,
    SUM(CASE 
        WHEN movement_type IN ('PURCHASE_IN', 'ADJUSTMENT_IN', 'RETURN_IN', 'PRODUCTION_IN', 'TRANSFER') 
             AND to_location_id = location_id 
        THEN quantity 
        ELSE 0 
    END) - 
    SUM(CASE 
        WHEN movement_type IN ('ISSUE_OUT', 'ADJUSTMENT_OUT', 'RETURN_OUT', 'SCRAP', 'PRODUCTION_OUT', 'DAMAGE', 'THEFT', 'TRANSFER') 
             AND from_location_id = location_id 
        THEN quantity 
        ELSE 0 
    END) as qty_on_hand,
    MAX(transaction_date) as last_movement_date
FROM stock_movements
WHERE is_reversed = FALSE
GROUP BY item_id, location_id, batch_id;

CREATE UNIQUE INDEX idx_stock_balance_unique ON stock_balance(item_id, location_id, COALESCE(batch_id, '00000000-0000-0000-0000-000000000000'::uuid));
CREATE INDEX idx_stock_balance_item ON stock_balance(item_id);
CREATE INDEX idx_stock_balance_location ON stock_balance(location_id);

-- ============================================================================
-- SECTION 14A: STOCK VALUATION HISTORY (NEW - Added Oct 21, 2025)
-- ============================================================================

CREATE TABLE stock_valuation_history (
    valuation_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    item_id UUID NOT NULL REFERENCES items(item_id),
    location_id UUID REFERENCES locations(location_id),
    valuation_date DATE NOT NULL,
    quantity_on_hand NUMERIC(15,3) NOT NULL,
    unit_cost NUMERIC(15,2) NOT NULL,
    total_value NUMERIC(15,2) NOT NULL,
    valuation_method VARCHAR(20) NOT NULL,
    calculated_by VARCHAR(50) DEFAULT 'SYSTEM',
    calculated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    remarks TEXT
);

CREATE INDEX idx_stock_valuation_history_item ON stock_valuation_history(item_id);
CREATE INDEX idx_stock_valuation_history_date ON stock_valuation_history(valuation_date);

-- Function to snapshot stock valuation (run monthly)
CREATE OR REPLACE FUNCTION snapshot_stock_valuation()
RETURNS void AS $$
BEGIN
    INSERT INTO stock_valuation_history (
        item_id, location_id, valuation_date, 
        quantity_on_hand, unit_cost, total_value, valuation_method
    )
    SELECT 
        sb.item_id, sb.location_id, CURRENT_DATE,
        sb.qty_on_hand,
        COALESCE(i.last_purchase_price, i.avg_purchase_price, 0),
        sb.qty_on_hand * COALESCE(i.last_purchase_price, i.avg_purchase_price, 0),
        i.valuation_method
    FROM stock_balance sb
    JOIN items i ON sb.item_id = i.item_id
    WHERE sb.qty_on_hand > 0;
END;
$$ LANGUAGE plpgsql;

-- ============================================================================
-- SECTION 15: INTERNAL REQUISITIONS & ISSUES
-- ============================================================================

CREATE TABLE internal_requisitions (
    requisition_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    requisition_number VARCHAR(50) UNIQUE NOT NULL,
    requester_id UUID NOT NULL REFERENCES users(user_id),
    department_id UUID NOT NULL REFERENCES departments(department_id),
    factory_id UUID NOT NULL REFERENCES factories(factory_id),
    requisition_date DATE NOT NULL,
    required_by_date DATE,
    purpose VARCHAR(200),
    status VARCHAR(20) DEFAULT 'DRAFT' CHECK (status IN ('DRAFT', 'SUBMITTED', 'APPROVED', 'PARTIALLY_ISSUED', 'FULLY_ISSUED', 'REJECTED', 'CANCELLED')),
    approved_by UUID REFERENCES users(user_id),
    approved_at TIMESTAMP,
    rejection_reason TEXT,
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES users(user_id),
    updated_by UUID REFERENCES users(user_id),
    deleted_at TIMESTAMP NULL,
    deleted_by UUID REFERENCES users(user_id)
);

CREATE TABLE internal_requisition_lines (
    requisition_line_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    requisition_id UUID NOT NULL REFERENCES internal_requisitions(requisition_id) ON DELETE CASCADE,
    item_id UUID NOT NULL REFERENCES items(item_id),
    requested_qty NUMERIC(15,3) NOT NULL,
    issued_qty NUMERIC(15,3) DEFAULT 0,
    pending_qty NUMERIC(15,3) NOT NULL,
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    purpose TEXT,
    status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'APPROVED', 'PARTIALLY_ISSUED', 'FULLY_ISSUED', 'REJECTED')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE stock_issues (
    issue_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    issue_number VARCHAR(50) UNIQUE NOT NULL,
    requisition_id UUID REFERENCES internal_requisitions(requisition_id),
    department_id UUID NOT NULL REFERENCES departments(department_id),
    factory_id UUID NOT NULL REFERENCES factories(factory_id),
    issue_date DATE NOT NULL,
    issued_by UUID NOT NULL REFERENCES users(user_id),
    approved_by UUID REFERENCES users(user_id),
    received_by_name VARCHAR(100), -- Person who received the items
    received_by_signature TEXT,
    status VARCHAR(20) DEFAULT 'DRAFT' CHECK (status IN ('DRAFT', 'SUBMITTED', 'APPROVED', 'ISSUED', 'CANCELLED')),
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES users(user_id),
    updated_by UUID REFERENCES users(user_id)
);

CREATE TABLE stock_issue_lines (
    issue_line_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    issue_id UUID NOT NULL REFERENCES stock_issues(issue_id) ON DELETE CASCADE,
    requisition_line_id UUID REFERENCES internal_requisition_lines(requisition_line_id),
    item_id UUID NOT NULL REFERENCES items(item_id),
    batch_id UUID REFERENCES stock_batches(batch_id),
    serial_no VARCHAR(50),
    location_id UUID NOT NULL REFERENCES locations(location_id),
    issued_qty NUMERIC(15,3) NOT NULL,
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    unit_cost NUMERIC(15,2),
    total_cost NUMERIC(15,2),
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================================================================
-- SECTION 16: TRANSFERS & RETURNS
-- ============================================================================

CREATE TABLE stock_transfers (
    transfer_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    transfer_number VARCHAR(50) UNIQUE NOT NULL,
    from_location_id UUID NOT NULL REFERENCES locations(location_id),
    to_location_id UUID NOT NULL REFERENCES locations(location_id),
    from_factory_id UUID REFERENCES factories(factory_id),
    to_factory_id UUID REFERENCES factories(factory_id),
    transfer_date DATE NOT NULL,
    transfer_type VARCHAR(20) DEFAULT 'INTERNAL' CHECK (transfer_type IN ('INTERNAL', 'INTER_FACTORY', 'INTER_LOCATION')),
    requested_by UUID REFERENCES users(user_id),
    approved_by UUID REFERENCES users(user_id),
    sent_by UUID REFERENCES users(user_id),
    received_by UUID REFERENCES users(user_id),
    received_at TIMESTAMP,
    status VARCHAR(20) DEFAULT 'DRAFT' CHECK (status IN ('DRAFT', 'SUBMITTED', 'APPROVED', 'IN_TRANSIT', 'RECEIVED', 'CANCELLED')),
    vehicle_no VARCHAR(50),
    driver_name VARCHAR(100),
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES users(user_id),
    updated_by UUID REFERENCES users(user_id)
);

CREATE TABLE stock_transfer_lines (
    transfer_line_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    transfer_id UUID NOT NULL REFERENCES stock_transfers(transfer_id) ON DELETE CASCADE,
    item_id UUID NOT NULL REFERENCES items(item_id),
    batch_id UUID REFERENCES stock_batches(batch_id),
    serial_no VARCHAR(50),
    transferred_qty NUMERIC(15,3) NOT NULL,
    received_qty NUMERIC(15,3),
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE stock_returns (
    return_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    return_number VARCHAR(50) UNIQUE NOT NULL,
    return_type VARCHAR(20) NOT NULL CHECK (return_type IN ('SUPPLIER_RETURN', 'DEPARTMENT_RETURN', 'PRODUCTION_RETURN')),
    grn_id UUID REFERENCES goods_received_notes(grn_id),
    po_id UUID REFERENCES purchase_orders(po_id),
    supplier_id UUID REFERENCES suppliers(supplier_id),
    issue_id UUID REFERENCES stock_issues(issue_id),
    department_id UUID REFERENCES departments(department_id),
    factory_id UUID NOT NULL REFERENCES factories(factory_id),
    return_date DATE NOT NULL,
    return_reason VARCHAR(200),
    returned_by UUID REFERENCES users(user_id),
    approved_by UUID REFERENCES users(user_id),
    status VARCHAR(20) DEFAULT 'DRAFT' CHECK (status IN ('DRAFT', 'SUBMITTED', 'APPROVED', 'COMPLETED', 'CANCELLED')),
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES users(user_id),
    updated_by UUID REFERENCES users(user_id)
);

CREATE TABLE stock_return_lines (
    return_line_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    return_id UUID NOT NULL REFERENCES stock_returns(return_id) ON DELETE CASCADE,
    item_id UUID NOT NULL REFERENCES items(item_id),
    batch_id UUID REFERENCES stock_batches(batch_id),
    serial_no VARCHAR(50),
    returned_qty NUMERIC(15,3) NOT NULL,
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    return_reason TEXT,
    disposition VARCHAR(20) CHECK (disposition IN ('RESTOCK', 'SCRAP', 'REPAIR', 'RETURN_TO_SUPPLIER')),
    location_id UUID REFERENCES locations(location_id),
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE user_roles (
    user_role_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
    role_id UUID NOT NULL REFERENCES roles(role_id) ON DELETE CASCADE,
    assigned_by UUID REFERENCES users(user_id),
    assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, role_id)
);

CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    permission_key VARCHAR(100) UNIQUE NOT NULL, -- e.g., 'approve_po', 'create_grn'
    module VARCHAR(50) NOT NULL, -- e.g., 'PROCUREMENT', 'INVENTORY'
    module_code VARCHAR(50),
    requires_approval BOOLEAN DEFAULT FALSE,
    approval_threshold NUMERIC(15,2),
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Enhanced Permissions (Added Oct 21, 2025)
INSERT INTO permissions (permission_key, module, module_code, description) VALUES
-- Yarn Store
('yarn_store.view', 'INVENTORY', 'YARN_STORE', 'View yarn store data'),
('yarn_store.create', 'INVENTORY', 'YARN_STORE', 'Create yarn records'),
('yarn_store.update', 'INVENTORY', 'YARN_STORE', 'Update yarn records'),
('yarn_store.delete', 'INVENTORY', 'YARN_STORE', 'Delete yarn records'),
('yarn_store.issue', 'INVENTORY', 'YARN_STORE', 'Issue yarn for knitting'),
('yarn_store.approve', 'INVENTORY', 'YARN_STORE', 'Approve yarn transactions'),

-- IT Store
('it_store.view', 'INVENTORY', 'IT_STORE', 'View IT store data'),
('it_store.create', 'INVENTORY', 'IT_STORE', 'Create IT asset records'),
('it_store.update', 'INVENTORY', 'IT_STORE', 'Update IT asset records'),
('it_store.assign', 'INVENTORY', 'IT_STORE', 'Assign IT assets to users'),
('it_store.approve', 'INVENTORY', 'IT_STORE', 'Approve IT asset assignments'),

-- General Store
('general_store.view', 'INVENTORY', 'GENERAL_STORE', 'View general store data'),
('general_store.create', 'INVENTORY', 'GENERAL_STORE', 'Create general items'),
('general_store.issue', 'INVENTORY', 'GENERAL_STORE', 'Issue general items'),
('general_store.approve', 'INVENTORY', 'GENERAL_STORE', 'Approve general store requisitions');

CREATE TABLE role_permissions (
    role_permission_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    role_id UUID NOT NULL REFERENCES roles(role_id) ON DELETE CASCADE,
    permission_id UUID NOT NULL REFERENCES permissions(permission_id) ON DELETE CASCADE,
    UNIQUE(role_id, permission_id)
);

CREATE TABLE user_sessions (
    session_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
    session_token VARCHAR(255) UNIQUE NOT NULL,
    ip_address VARCHAR(50),
    user_agent TEXT,
    login_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_activity_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    logout_at TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE
);

-- Add FK from departments to users (manager)
ALTER TABLE departments ADD CONSTRAINT fk_dept_manager 
    FOREIGN KEY (manager_id) REFERENCES users(user_id);

-- Department-Manager Circular Dependency Validation (Added Oct 21, 2025)
ALTER TABLE departments 
ADD CONSTRAINT check_manager_same_factory 
CHECK (
    manager_id IS NULL OR 
    NOT EXISTS (
        SELECT 1 FROM users 
        WHERE user_id = manager_id 
        AND factory_id != departments.factory_id
    )
);

CREATE OR REPLACE FUNCTION validate_department_manager()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.manager_id IS NULL THEN
        RETURN NEW;
    END IF;
    
    IF NOT EXISTS (
        SELECT 1 FROM users 
        WHERE user_id = NEW.manager_id 
        AND factory_id = NEW.factory_id
        AND is_active = TRUE
    ) THEN
        RAISE EXCEPTION 'Manager must be an active user in the same factory';
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_validate_department_manager
BEFORE INSERT OR UPDATE ON departments
FOR EACH ROW EXECUTE FUNCTION validate_department_manager();

-- ============================================================================
-- SECTION 17: INVENTORY ADJUSTMENTS & STOCKTAKING
-- ============================================================================

CREATE TABLE inventory_adjustments (
    adjustment_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    adjustment_number VARCHAR(50) UNIQUE NOT NULL,
    factory_id UUID NOT NULL REFERENCES factories(factory_id),
    adjustment_date DATE NOT NULL,
    adjustment_type VARCHAR(20) NOT NULL CHECK (adjustment_type IN ('INCREASE', 'DECREASE', 'DAMAGE', 'THEFT', 'EXPIRY', 'OBSOLETE', 'CORRECTION')),
    reason TEXT NOT NULL,
    performed_by UUID NOT NULL REFERENCES users(user_id),
    approved_by UUID REFERENCES users(user_id),
    approved_at TIMESTAMP,
    status VARCHAR(20) DEFAULT 'DRAFT' CHECK (status IN ('DRAFT', 'SUBMITTED', 'APPROVED', 'POSTED', 'REJECTED', 'CANCELLED')),
    total_value_impact NUMERIC(15,2), -- Positive or negative
    attachments JSONB,
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES users(user_id),
    updated_by UUID REFERENCES users(user_id)
);

CREATE TABLE inventory_adjustment_lines (
    adjustment_line_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    adjustment_id UUID NOT NULL REFERENCES inventory_adjustments(adjustment_id) ON DELETE CASCADE,
    item_id UUID NOT NULL REFERENCES items(item_id),
    location_id UUID NOT NULL REFERENCES locations(location_id),
    batch_id UUID REFERENCES stock_batches(batch_id),
    serial_no VARCHAR(50),
    system_qty NUMERIC(15,3) NOT NULL,
    adjusted_qty NUMERIC(15,3) NOT NULL,
    variance_qty NUMERIC(15,3) NOT NULL, -- adjusted_qty - system_qty
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    unit_cost NUMERIC(15,2),
    value_impact NUMERIC(15,2), -- variance_qty * unit_cost
    reason TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE stocktake_sessions (
    stocktake_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    stocktake_number VARCHAR(50) UNIQUE NOT NULL,
    factory_id UUID NOT NULL REFERENCES factories(factory_id),
    stocktake_type VARCHAR(20) DEFAULT 'FULL' CHECK (stocktake_type IN ('FULL', 'CYCLE', 'SPOT')),
    location_id UUID REFERENCES locations(location_id), -- NULL for full factory stocktake
    start_date DATE NOT NULL,
    end_date DATE,
    scheduled_date DATE,
    status VARCHAR(20) DEFAULT 'PLANNED' CHECK (status IN ('PLANNED', 'IN_PROGRESS', 'COMPLETED', 'APPROVED', 'CANCELLED')),
    created_by UUID NOT NULL REFERENCES users(user_id),
    approved_by UUID REFERENCES users(user_id),
    approved_at TIMESTAMP,
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE stocktake_lines (
    stocktake_line_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    stocktake_id UUID NOT NULL REFERENCES stocktake_sessions(stocktake_id) ON DELETE CASCADE,
    item_id UUID NOT NULL REFERENCES items(item_id),
    location_id UUID NOT NULL REFERENCES locations(location_id),
    batch_id UUID REFERENCES stock_batches(batch_id),
    serial_no VARCHAR(50),
    system_qty NUMERIC(15,3) NOT NULL,
    counted_qty NUMERIC(15,3),
    variance_qty NUMERIC(15,3), -- counted_qty - system_qty
    uom_id UUID NOT NULL REFERENCES uoms(uom_id),
    counted_by UUID REFERENCES users(user_id),
    counted_at TIMESTAMP,
    verified_by UUID REFERENCES users(user_id),
    verified_at TIMESTAMP,
    status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'COUNTED', 'VERIFIED', 'ADJUSTED')),
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================================================================
-- SECTION 18: ASSETS MANAGEMENT (IT & SERIALIZED EQUIPMENT)
-- ============================================================================

CREATE TABLE assets (
    asset_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    item_id UUID NOT NULL REFERENCES items(item_id),
    asset_tag VARCHAR(50) UNIQUE NOT NULL,
    serial_no VARCHAR(100) UNIQUE NOT NULL,
    model VARCHAR(100),
    manufacturer VARCHAR(100),
    mac_address VARCHAR(50),
    imei VARCHAR(50),
    
    -- Purchase Info
    po_id UUID REFERENCES purchase_orders(po_id),
    grn_id UUID REFERENCES goods_received_notes(grn_id),
    purchase_date DATE,
    purchase_price NUMERIC(15,2),
    currency_id UUID REFERENCES currencies(currency_id),
    supplier_id UUID REFERENCES suppliers(supplier_id),
    invoice_number VARCHAR(50),
    
    -- Warranty
    warranty_start_date DATE,
    warranty_end_date DATE,
    warranty_terms TEXT,
    
    -- Assignment
    current_status VARCHAR(20) DEFAULT 'IN_STOCK' CHECK (current_status IN ('IN_STOCK', 'ASSIGNED', 'IN_REPAIR', 'RETIRED', 'DISPOSED', 'LOST', 'STOLEN')),
    assigned_to_user_id UUID REFERENCES users(user_id),
    assigned_to_department_id UUID REFERENCES departments(department_id),
    assigned_at TIMESTAMP,
    location_id UUID REFERENCES locations(location_id),
    
    -- Depreciation
    depreciation_method VARCHAR(20), -- STRAIGHT_LINE, DECLINING_BALANCE
    useful_life_years INTEGER,
    salvage_value NUMERIC(15,2),
    current_book_value NUMERIC(15,2),
    
    -- Maintenance
    last_maintenance_date DATE,
    next_maintenance_date DATE,
    maintenance_frequency_days INTEGER,
    
    -- Disposal
    disposal_date DATE,
    disposal_reason TEXT,
    disposal_value NUMERIC(15,2),
    
    -- Software License (for IT assets)
    license_key TEXT,
    license_expiry_date DATE,
    
    -- Attachments & Notes
    attachments JSONB,
    notes TEXT,
    
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES users(user_id),
    updated_by UUID REFERENCES users(user_id),
    deleted_at TIMESTAMP NULL,
    deleted_by UUID REFERENCES users(user_id)
);

CREATE INDEX idx_assets_item ON assets(item_id);
CREATE INDEX idx_assets_assigned_user ON assets(assigned_to_user_id);
CREATE INDEX idx_assets_status ON assets(current_status);

CREATE TABLE asset_assignment_history (
    assignment_history_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    asset_id UUID NOT NULL REFERENCES assets(asset_id) ON DELETE CASCADE,
    from_user_id UUID REFERENCES users(user_id),
    to_user_id UUID REFERENCES users(user_id),
    from_department_id UUID REFERENCES departments(department_id),
    to_department_id UUID REFERENCES departments(department_id),
    from_location_id UUID REFERENCES locations(location_id),
    to_location_id UUID REFERENCES locations(location_id),
    assignment_type VARCHAR(20) CHECK (assignment_type IN ('NEW_ASSIGNMENT', 'TRANSFER', 'RETURN', 'RETIREMENT')),
    assigned_by UUID REFERENCES users(user_id),
    assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    returned_at TIMESTAMP,
    return_condition VARCHAR(20) CHECK (return_condition IN ('GOOD', 'FAIR', 'DAMAGED', 'LOST')),
    acceptance_signature TEXT, -- Digital signature or acknowledgment
    acceptance_date DATE,
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE asset_maintenance_records (
    maintenance_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    asset_id UUID NOT NULL REFERENCES assets(asset_id) ON DELETE CASCADE,
    maintenance_type VARCHAR(20) CHECK (maintenance_type IN ('PREVENTIVE', 'CORRECTIVE', 'UPGRADE', 'INSPECTION')),
    maintenance_date DATE NOT NULL,
    performed_by VARCHAR(100), -- Internal staff or external vendor
    vendor_id UUID REFERENCES suppliers(supplier_id),
    cost NUMERIC(15,2),
    currency_id UUID REFERENCES currencies(currency_id),
    description TEXT,
    issues_found TEXT,
    actions_taken TEXT,
    next_maintenance_date DATE,
    downtime_hours NUMERIC(5,2),
    attachments JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES users(user_id)
);

-- ============================================================================
-- SECTION 19: APPROVAL WORKFLOWS
-- ============================================================================

CREATE TABLE approval_workflows (
    workflow_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    workflow_name VARCHAR(100) UNIQUE NOT NULL,
    entity_type VARCHAR(50) NOT NULL, -- PR, PO, GRN, ADJUSTMENT, TRANSFER, ISSUE
    description TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE approval_workflow_steps (
    step_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    workflow_id UUID NOT NULL REFERENCES approval_workflows(workflow_id) ON DELETE CASCADE,
    step_sequence INTEGER NOT NULL,
    step_name VARCHAR(100) NOT NULL,
    approver_role_id UUID REFERENCES roles(role_id),
    approver_user_id UUID REFERENCES users(user_id), -- Specific user if needed
    is_parallel BOOLEAN DEFAULT FALSE, -- TRUE if multiple approvers can approve simultaneously
    parallel_group INTEGER, -- Group number for parallel approvals
    is_mandatory BOOLEAN DEFAULT TRUE,
    timeout_hours INTEGER, -- Escalation timeout
    escalation_role_id UUID REFERENCES roles(role_id),
    conditions JSONB, -- {"min_value": 10000, "max_value": 50000}
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(workflow_id, step_sequence)
);

CREATE TABLE approvals (
    approval_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    entity_type VARCHAR(50) NOT NULL, -- PR, PO, GRN, ADJUSTMENT, TRANSFER, ISSUE
    entity_id UUID NOT NULL,
    entity_number VARCHAR(50), -- Human-readable reference
    workflow_id UUID REFERENCES approval_workflows(workflow_id),
    current_step_sequence INTEGER,
    requested_by UUID NOT NULL REFERENCES users(user_id),
    requested_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'APPROVED', 'REJECTED', 'CANCELLED', 'ESCALATED')),
    completed_at TIMESTAMP,
    remarks TEXT,
    metadata JSONB, -- Additional context like total value, urgency, etc.
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_approvals_entity ON approvals(entity_type, entity_id);
CREATE INDEX idx_approvals_status ON approvals(status);

CREATE TABLE approval_history (
    approval_history_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    approval_id UUID NOT NULL REFERENCES approvals(approval_id) ON DELETE CASCADE,
    step_sequence INTEGER NOT NULL,
    approver_role_id UUID REFERENCES roles(role_id),
    approver_user_id UUID NOT NULL REFERENCES users(user_id),
    action VARCHAR(20) NOT NULL CHECK (action IN ('APPROVED', 'REJECTED', 'DELEGATED', 'ESCALATED', 'CANCELLED')),
    delegated_to_user_id UUID REFERENCES users(user_id),
    action_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    comments TEXT,
    ip_address VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================================================================
-- SECTION 20: NOTIFICATIONS
-- ============================================================================

CREATE TABLE notifications (
    notification_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
    notification_type VARCHAR(50) NOT NULL, -- LOW_STOCK, APPROVAL_REQUIRED, GRN_QC_PENDING, etc.
    title VARCHAR(200) NOT NULL,
    message TEXT NOT NULL,
    priority VARCHAR(20) DEFAULT 'NORMAL' CHECK (priority IN ('LOW', 'NORMAL', 'HIGH', 'URGENT')),
    entity_type VARCHAR(50), -- PR, PO, GRN, etc.
    entity_id UUID,
    entity_number VARCHAR(50),
    is_read BOOLEAN DEFAULT FALSE,
    read_at TIMESTAMP,
    action_url VARCHAR(500), -- Deep link to relevant page
    payload JSONB, -- Additional data
    expires_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_notifications_user ON notifications(user_id);
CREATE INDEX idx_notifications_read ON notifications(is_read);
CREATE INDEX idx_notifications_created ON notifications(created_at);

CREATE TABLE user_notification_preferences (
    preference_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
    notification_type VARCHAR(50) NOT NULL,
    email_enabled BOOLEAN DEFAULT TRUE,
    system_enabled BOOLEAN DEFAULT TRUE,
    sms_enabled BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, notification_type)
);

-- ============================================================================
-- SECTION 21: REPORTS & SCHEDULED JOBS
-- ============================================================================

CREATE TABLE scheduled_reports (
    schedule_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    report_name VARCHAR(100) NOT NULL,
    report_type VARCHAR(50) NOT NULL, -- STOCK_VALUATION, MOVEMENT_LEDGER, AGING_ANALYSIS, etc.
    frequency VARCHAR(20) NOT NULL CHECK (frequency IN ('DAILY', 'WEEKLY', 'MONTHLY', 'QUARTERLY', 'YEARLY')),
    schedule_time TIME NOT NULL, -- Time to run the report
    day_of_week INTEGER, -- 1-7 for weekly reports
    day_of_month INTEGER, -- 1-31 for monthly reports
    recipients JSONB NOT NULL, -- ["user_id1", "user_id2", "email@example.com"]
    parameters JSONB, -- Report-specific parameters
    output_format VARCHAR(20) DEFAULT 'PDF' CHECK (output_format IN ('PDF', 'EXCEL', 'CSV')),
    is_active BOOLEAN DEFAULT TRUE,
    last_run_at TIMESTAMP,
    next_run_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES users(user_id)
);

CREATE TABLE report_execution_logs (
    execution_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    schedule_id UUID REFERENCES scheduled_reports(schedule_id),
    report_type VARCHAR(50) NOT NULL,
    execution_start_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    execution_end_time TIMESTAMP,
    status VARCHAR(20) CHECK (status IN ('RUNNING', 'SUCCESS', 'FAILED', 'CANCELLED')),
    output_file_path TEXT,
    error_message TEXT,
    record_count INTEGER,
    executed_by UUID REFERENCES users(user_id)
);

-- ============================================================================
-- SECTION 22: AUDIT LOGS (IMMUTABLE)
-- ============================================================================

CREATE TABLE audit_logs (
    log_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(user_id),
    user_full_name VARCHAR(100),
    role_name VARCHAR(50),
    department_name VARCHAR(100),
    entity_type VARCHAR(50) NOT NULL, -- ITEM, PO, GRN, USER, ROLE, etc.
    entity_id UUID NOT NULL,
    entity_number VARCHAR(50), -- Human-readable reference
    action VARCHAR(20) NOT NULL CHECK (action IN ('CREATE', 'UPDATE', 'DELETE', 'APPROVE', 'REJECT', 'CANCEL', 'LOGIN', 'LOGOUT')),
    before_value JSONB, -- State before change
    after_value JSONB, -- State after change
    changes JSONB, -- JSON diff of changes
    ip_address VARCHAR(50),
    user_agent TEXT,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    session_id UUID,
    remarks TEXT
);

CREATE INDEX idx_audit_logs_user ON audit_logs(user_id);
CREATE INDEX idx_audit_logs_entity ON audit_logs(entity_type, entity_id);
CREATE INDEX idx_audit_logs_action ON audit_logs(action);
CREATE INDEX idx_audit_logs_timestamp ON audit_logs(timestamp);

-- Make audit_logs immutable (no updates/deletes allowed)
CREATE RULE audit_logs_no_update AS ON UPDATE TO audit_logs DO INSTEAD NOTHING;
CREATE RULE audit_logs_no_delete AS ON DELETE TO audit_logs DO INSTEAD NOTHING;

-- ============================================================================
-- SECTION 22A: USER ACTIVITY LOG (NEW - Added Oct 21, 2025)
-- ============================================================================

CREATE TABLE user_activity_log (
    activity_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(user_id),
    activity_type VARCHAR(50) NOT NULL,
    entity_type VARCHAR(50),
    entity_id UUID,
    entity_number VARCHAR(50),
    factory_id UUID REFERENCES factories(factory_id),
    store_type VARCHAR(50),
    ip_address VARCHAR(50),
    user_agent TEXT,
    session_id UUID,
    activity_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    details JSONB
);

CREATE INDEX idx_user_activity_user ON user_activity_log(user_id);
CREATE INDEX idx_user_activity_timestamp ON user_activity_log(activity_timestamp);
CREATE INDEX idx_user_activity_type ON user_activity_log(activity_type);

-- ============================================================================
-- SECTION 23: SYSTEM CONFIGURATION & SETTINGS
-- ============================================================================

CREATE TABLE system_settings (
    setting_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    setting_key VARCHAR(100) UNIQUE NOT NULL,
    setting_value TEXT NOT NULL,
    setting_type VARCHAR(20) DEFAULT 'STRING' CHECK (setting_type IN ('STRING', 'INTEGER', 'DECIMAL', 'BOOLEAN', 'JSON')),
    description TEXT,
    is_system BOOLEAN DEFAULT FALSE, -- TRUE for settings that shouldn't be modified via UI
    category VARCHAR(50), -- GENERAL, INVENTORY, PROCUREMENT, NOTIFICATIONS
    updated_by UUID REFERENCES users(user_id),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert some default settings
INSERT INTO system_settings (setting_key, setting_value, setting_type, description, category) VALUES
('company_name', 'PDL Group', 'STRING', 'Company Name', 'GENERAL'),
('base_currency', 'BDT', 'STRING', 'Base Currency Code', 'GENERAL'),
('low_stock_notification_enabled', 'true', 'BOOLEAN', 'Enable low stock notifications', 'NOTIFICATIONS'),
('stock_valuation_method', 'FIFO', 'STRING', 'Default Stock Valuation Method', 'INVENTORY'),
('po_approval_threshold', '50000', 'DECIMAL', 'PO amount requiring management approval', 'PROCUREMENT'),
('grn_auto_post_on_qc_pass', 'false', 'BOOLEAN', 'Automatically post GRN to stock on QC pass', 'INVENTORY'),
('session_timeout_minutes', '60', 'INTEGER', 'User session timeout in minutes', 'GENERAL');

-- ============================================================================
-- SECTION 24: DOCUMENT ATTACHMENTS (GENERIC)
-- ============================================================================

CREATE TABLE attachments (
    attachment_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    entity_type VARCHAR(50) NOT NULL, -- PO, GRN, INVOICE, ASSET, etc.
    entity_id UUID NOT NULL,
    file_name VARCHAR(255) NOT NULL,
    file_path TEXT NOT NULL,
    file_size_kb INTEGER,
    file_type VARCHAR(50), -- application/pdf, image/jpeg, etc.
    mime_type VARCHAR(100),
    description TEXT,
    uploaded_by UUID REFERENCES users(user_id),
    uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE
);

CREATE INDEX idx_attachments_entity ON attachments(entity_type, entity_id);

-- ============================================================================
-- SECTION 25: COMMENTS/NOTES (GENERIC)
-- ============================================================================

CREATE TABLE comments (
    comment_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    entity_type VARCHAR(50) NOT NULL,
    entity_id UUID NOT NULL,
    comment_text TEXT NOT NULL,
    commented_by UUID NOT NULL REFERENCES users(user_id),
    commented_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    parent_comment_id UUID REFERENCES comments(comment_id), -- For threaded comments
    is_internal BOOLEAN DEFAULT FALSE, -- Internal notes vs. supplier-visible
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_comments_entity ON comments(entity_type, entity_id);

-- ============================================================================
-- SECTION 26: TRIGGERS FOR AUTO-UPDATES
-- ============================================================================

-- Trigger to update 'updated_at' timestamp automatically
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$ LANGUAGE plpgsql;

-- Apply trigger to all relevant tables
CREATE TRIGGER update_companies_updated_at BEFORE UPDATE ON companies FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_factories_updated_at BEFORE UPDATE ON factories FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_departments_updated_at BEFORE UPDATE ON departments FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_locations_updated_at BEFORE UPDATE ON locations FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_suppliers_updated_at BEFORE UPDATE ON suppliers FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_items_updated_at BEFORE UPDATE ON items FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_buyers_updated_at BEFORE UPDATE ON buyers FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_styles_updated_at BEFORE UPDATE ON styles FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_work_orders_updated_at BEFORE UPDATE ON work_orders FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_purchase_requests_updated_at BEFORE UPDATE ON purchase_requests FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_purchase_orders_updated_at BEFORE UPDATE ON purchase_orders FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_grn_updated_at BEFORE UPDATE ON goods_received_notes FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Trigger to calculate pending_qty in PO lines
CREATE OR REPLACE FUNCTION calculate_po_line_pending_qty()
RETURNS TRIGGER AS $
BEGIN
    NEW.pending_qty = NEW.ordered_qty - NEW.received_qty;
    RETURN NEW;
END;
$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_po_line_pending_qty BEFORE INSERT OR UPDATE ON purchase_order_lines 
FOR EACH ROW EXECUTE FUNCTION calculate_po_line_pending_qty();

-- Trigger to calculate pending_qty in requisition lines
CREATE OR REPLACE FUNCTION calculate_requisition_line_pending_qty()
RETURNS TRIGGER AS $
BEGIN
    NEW.pending_qty = NEW.requested_qty - NEW.issued_qty;
    RETURN NEW;
END;
$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_requisition_line_pending_qty BEFORE INSERT OR UPDATE ON internal_requisition_lines 
FOR EACH ROW EXECUTE FUNCTION calculate_requisition_line_pending_qty();

-- Trigger to calculate variance in stocktake
CREATE OR REPLACE FUNCTION calculate_stocktake_variance()
RETURNS TRIGGER AS $
BEGIN
    IF NEW.counted_qty IS NOT NULL THEN
        NEW.variance_qty = NEW.counted_qty - NEW.system_qty;
    END IF;
    RETURN NEW;
END;
$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_stocktake_variance BEFORE INSERT OR UPDATE ON stocktake_lines 
FOR EACH ROW EXECUTE FUNCTION calculate_stocktake_variance();

-- Trigger to calculate variance in adjustment lines
CREATE OR REPLACE FUNCTION calculate_adjustment_variance()
RETURNS TRIGGER AS $
BEGIN
    NEW.variance_qty = NEW.adjusted_qty - NEW.system_qty;
    IF NEW.unit_cost IS NOT NULL THEN
        NEW.value_impact = NEW.variance_qty * NEW.unit_cost;
    END IF;
    RETURN NEW;
END;
$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_adjustment_variance BEFORE INSERT OR UPDATE ON inventory_adjustment_lines 
FOR EACH ROW EXECUTE FUNCTION calculate_adjustment_variance();

-- Trigger to refresh stock_balance materialized view after stock_movements insert
CREATE OR REPLACE FUNCTION refresh_stock_balance()
RETURNS TRIGGER AS $
BEGIN
    REFRESH MATERIALIZED VIEW CONCURRENTLY stock_balance;
    RETURN NULL;
END;
$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_refresh_stock_balance AFTER INSERT OR UPDATE OR DELETE ON stock_movements 
FOR EACH STATEMENT EXECUTE FUNCTION refresh_stock_balance();

-- ============================================================================
-- SECTION 27: VIEWS FOR COMMON QUERIES
-- ============================================================================

-- View: Current Stock Summary by Item and Location
CREATE VIEW v_current_stock AS
SELECT 
    i.item_id,
    i.sku,
    i.item_name,
    ic.name as category_name,
    sb.location_id,
    l.location_code,
    l.name as location_name,
    sb.batch_id,
    stb.batch_no,
    sb.qty_on_hand,
    u.uom_code,
    i.reorder_level,
    i.safety_stock,
    CASE 
        WHEN sb.qty_on_hand <= i.reorder_level THEN 'LOW_STOCK'
        WHEN sb.qty_on_hand <= i.safety_stock THEN 'CRITICAL'
        ELSE 'NORMAL'
    END as stock_status
FROM stock_balance sb
JOIN items i ON sb.item_id = i.item_id
LEFT JOIN item_categories ic ON i.category_id = ic.category_id
LEFT JOIN locations l ON sb.location_id = l.location_id
LEFT JOIN stock_batches stb ON sb.batch_id = stb.batch_id
LEFT JOIN uoms u ON i.default_uom_id = u.uom_id
WHERE sb.qty_on_hand > 0 AND i.is_active = TRUE;

-- View: Pending Purchase Orders
CREATE VIEW v_pending_purchase_orders AS
SELECT 
    po.po_id,
    po.po_number,
    po.po_date,
    po.delivery_date,
    s.name as supplier_name,
    f.name as factory_name,
    po.total_amount,
    c.currency_code,
    po.status,
    COUNT(pol.po_line_id) as total_lines,
    SUM(CASE WHEN pol.status = 'FULLY_RECEIVED' THEN 1 ELSE 0 END) as received_lines,
    SUM(pol.pending_qty) as total_pending_qty
FROM purchase_orders po
JOIN suppliers s ON po.supplier_id = s.supplier_id
JOIN factories f ON po.factory_id = f.factory_id
LEFT JOIN currencies c ON po.currency_id = c.currency_id
LEFT JOIN purchase_order_lines pol ON po.po_id = pol.po_id
WHERE po.status NOT IN ('CLOSED', 'CANCELLED')
GROUP BY po.po_id, po.po_number, po.po_date, po.delivery_date, 
         s.name, f.name, po.total_amount, c.currency_code, po.status;

-- View: Pending Approvals by User
CREATE VIEW v_pending_approvals AS
SELECT 
    a.approval_id,
    a.entity_type,
    a.entity_id,
    a.entity_number,
    a.requested_by,
    u.full_name as requested_by_name,
    a.requested_at,
    aws.step_name as current_step,
    aws.approver_role_id,
    r.role_name as approver_role_name,
    aws.approver_user_id,
    a.status,
    a.metadata
FROM approvals a
JOIN approval_workflow_steps aws ON a.workflow_id = aws.workflow_id 
    AND a.current_step_sequence = aws.step_sequence
JOIN users u ON a.requested_by = u.user_id
LEFT JOIN roles r ON aws.approver_role_id = r.role_id
WHERE a.status = 'PENDING';

-- View: Item Movement Summary (Last 30 days)
CREATE VIEW v_item_movement_summary AS
SELECT 
    i.item_id,
    i.sku,
    i.item_name,
    COUNT(sm.movement_id) as total_transactions,
    SUM(CASE WHEN sm.movement_type IN ('PURCHASE_IN', 'ADJUSTMENT_IN', 'RETURN_IN', 'PRODUCTION_IN') 
        THEN sm.quantity ELSE 0 END) as total_in,
    SUM(CASE WHEN sm.movement_type IN ('ISSUE_OUT', 'ADJUSTMENT_OUT', 'RETURN_OUT', 'SCRAP', 'PRODUCTION_OUT', 'DAMAGE', 'THEFT') 
        THEN sm.quantity ELSE 0 END) as total_out,
    MAX(sm.transaction_date) as last_movement_date
FROM items i
LEFT JOIN stock_movements sm ON i.item_id = sm.item_id 
    AND sm.transaction_date >= CURRENT_DATE - INTERVAL '30 days'
GROUP BY i.item_id, i.sku, i.item_name;

-- ============================================================================
-- END OF SCHEMA
-- ============================================================================

-- Final Comments and Notes:
-- 1. All UUIDs are generated using gen_random_uuid() (requires pgcrypto extension)
-- 2. Soft deletes implemented via deleted_at and deleted_by columns
-- 3. Audit trail maintained through audit_logs table (immutable)
-- 4. FIFO valuation logic to be implemented in application layer
-- 5. Stock balance maintained via materialized view with auto-refresh trigger
-- 6. All monetary values use NUMERIC(15,2) for precision
-- 7. All qty fields use NUMERIC(15,3) to handle fractional quantities
-- 8. Role-based access control through users, roles, permissions tables
-- 9. Flexible approval workflow system with multi-step and parallel approvals
-- 10. Comprehensive indexing for performance optimization-- ============================================================================
-- PDL INVENTORY MANAGEMENT SYSTEM - DATABASE SCHEMA v1.0
-- Target: PostgreSQL 14+
-- Author: Mahmudur Rahman
-- Date: 2025-10-20
-- ============================================================================


