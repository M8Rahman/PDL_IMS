# Generated by Django 5.0.1 on 2025-10-28 06:34

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('inventory', '0001_initial'),
        ('procurement', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier (UUID)', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when record was last updated')),
                ('created_by', models.UUIDField(blank=True, help_text='User who created this record', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User who last updated this record', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when record was soft-deleted', null=True)),
                ('deleted_by', models.UUIDField(blank=True, help_text='User who deleted this record', null=True)),
                ('asset_tag', models.CharField(help_text="Unique asset tag/barcode (e.g., 'AST-2025-0001')", max_length=50, unique=True)),
                ('serial_no', models.CharField(help_text='Serial number from manufacturer', max_length=100, unique=True)),
                ('model', models.CharField(blank=True, help_text='Model number/name', max_length=100, null=True)),
                ('manufacturer', models.CharField(blank=True, help_text='Manufacturer name', max_length=100, null=True)),
                ('mac_address', models.CharField(blank=True, help_text='MAC address (for network devices)', max_length=50, null=True)),
                ('imei', models.CharField(blank=True, help_text='IMEI number (for mobile devices)', max_length=50, null=True, verbose_name='IMEI')),
                ('purchase_date', models.DateField(blank=True, help_text='Date of purchase', null=True)),
                ('purchase_price', models.DecimalField(blank=True, decimal_places=2, help_text='Original purchase price', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('invoice_number', models.CharField(blank=True, help_text='Invoice number', max_length=50, null=True)),
                ('warranty_start_date', models.DateField(blank=True, help_text='Warranty start date', null=True)),
                ('warranty_end_date', models.DateField(blank=True, help_text='Warranty end date', null=True)),
                ('warranty_terms', models.TextField(blank=True, help_text='Warranty terms and conditions', null=True)),
                ('current_status', models.CharField(choices=[('IN_STOCK', 'In Stock'), ('ASSIGNED', 'Assigned'), ('IN_REPAIR', 'In Repair'), ('RETIRED', 'Retired'), ('DISPOSED', 'Disposed'), ('LOST', 'Lost'), ('STOLEN', 'Stolen')], default='IN_STOCK', help_text='Current asset status', max_length=20)),
                ('assigned_at', models.DateTimeField(blank=True, help_text='Assignment timestamp', null=True)),
                ('depreciation_method', models.CharField(choices=[('STRAIGHT_LINE', 'Straight Line'), ('DECLINING_BALANCE', 'Declining Balance'), ('NO_DEPRECIATION', 'No Depreciation')], default='STRAIGHT_LINE', help_text='Depreciation calculation method', max_length=20)),
                ('useful_life_years', models.IntegerField(blank=True, help_text='Expected useful life in years', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('salvage_value', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated salvage value at end of life', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('current_book_value', models.DecimalField(blank=True, decimal_places=2, help_text='Current book value (after depreciation)', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('accumulated_depreciation', models.DecimalField(decimal_places=2, default=0, help_text='Total accumulated depreciation', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('last_maintenance_date', models.DateField(blank=True, help_text='Last maintenance date', null=True)),
                ('next_maintenance_date', models.DateField(blank=True, help_text='Next scheduled maintenance date', null=True)),
                ('maintenance_frequency_days', models.IntegerField(blank=True, help_text='Maintenance frequency in days', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('disposal_date', models.DateField(blank=True, help_text='Date of disposal', null=True)),
                ('disposal_reason', models.TextField(blank=True, help_text='Reason for disposal', null=True)),
                ('disposal_value', models.DecimalField(blank=True, decimal_places=2, help_text='Sale/scrap value at disposal', max_digits=15, null=True)),
                ('license_key', models.TextField(blank=True, help_text='Software license key(s)', null=True)),
                ('license_expiry_date', models.DateField(blank=True, help_text='License expiry date', null=True)),
                ('attachments', models.JSONField(blank=True, help_text='File attachments (JSON array of file paths)', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is asset active?')),
                ('assigned_to_department', models.ForeignKey(blank=True, help_text='Currently assigned to department', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_assets', to='core.department')),
                ('assigned_to_user', models.ForeignKey(blank=True, help_text='Currently assigned to user', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_assets', to=settings.AUTH_USER_MODEL)),
                ('currency', models.ForeignKey(blank=True, help_text='Purchase currency', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.currency')),
                ('grn', models.ForeignKey(blank=True, help_text='Source GRN', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assets', to='procurement.goodsreceivednote')),
                ('item', models.ForeignKey(help_text='Item master reference', on_delete=django.db.models.deletion.PROTECT, related_name='assets', to='inventory.item')),
                ('location', models.ForeignKey(blank=True, help_text='Current location', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='assets', to='core.location')),
                ('po', models.ForeignKey(blank=True, help_text='Source purchase order', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assets', to='procurement.purchaseorder')),
                ('supplier', models.ForeignKey(blank=True, help_text='Supplier', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assets_supplied', to='inventory.supplier')),
            ],
            options={
                'verbose_name': 'Asset',
                'verbose_name_plural': 'Assets',
                'db_table': 'assets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AssetAssignmentHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('assignment_type', models.CharField(choices=[('NEW_ASSIGNMENT', 'New Assignment'), ('TRANSFER', 'Transfer'), ('RETURN', 'Return to Stock'), ('RETIREMENT', 'Retirement')], help_text='Type of assignment', max_length=20)),
                ('assigned_at', models.DateTimeField(auto_now_add=True, help_text='Assignment timestamp')),
                ('returned_at', models.DateTimeField(blank=True, help_text='Return timestamp', null=True)),
                ('return_condition', models.CharField(blank=True, choices=[('GOOD', 'Good Condition'), ('FAIR', 'Fair Condition'), ('DAMAGED', 'Damaged'), ('LOST', 'Lost')], help_text='Condition of asset on return', max_length=20, null=True)),
                ('acceptance_signature', models.TextField(blank=True, help_text='Digital signature or acknowledgment', null=True)),
                ('acceptance_date', models.DateField(blank=True, help_text='Date of acceptance', null=True)),
                ('remarks', models.TextField(blank=True, help_text='Assignment remarks', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('asset', models.ForeignKey(help_text='Asset', on_delete=django.db.models.deletion.CASCADE, related_name='assignment_history', to='assets.asset')),
                ('assigned_by', models.ForeignKey(blank=True, help_text='User who made the assignment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asset_assignments_made', to=settings.AUTH_USER_MODEL)),
                ('from_department', models.ForeignKey(blank=True, help_text='From department', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asset_assignments_from', to='core.department')),
                ('from_location', models.ForeignKey(blank=True, help_text='From location', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asset_assignments_from', to='core.location')),
                ('from_user', models.ForeignKey(blank=True, help_text='From user', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asset_assignments_from', to=settings.AUTH_USER_MODEL)),
                ('to_department', models.ForeignKey(blank=True, help_text='To department', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asset_assignments_to', to='core.department')),
                ('to_location', models.ForeignKey(blank=True, help_text='To location', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asset_assignments_to', to='core.location')),
                ('to_user', models.ForeignKey(blank=True, help_text='To user', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asset_assignments_to', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Asset Assignment History',
                'verbose_name_plural': 'Asset Assignment Histories',
                'db_table': 'asset_assignment_history',
                'ordering': ['-assigned_at'],
            },
        ),
        migrations.CreateModel(
            name='AssetDepreciationSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('period_start_date', models.DateField(help_text='Depreciation period start')),
                ('period_end_date', models.DateField(help_text='Depreciation period end')),
                ('opening_book_value', models.DecimalField(decimal_places=2, help_text='Book value at period start', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('depreciation_amount', models.DecimalField(decimal_places=2, help_text='Depreciation for this period', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('closing_book_value', models.DecimalField(decimal_places=2, help_text='Book value at period end', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_posted', models.BooleanField(default=False, help_text='Has this depreciation been posted to accounting?')),
                ('posted_at', models.DateTimeField(blank=True, help_text='When depreciation was posted', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('asset', models.ForeignKey(help_text='Asset', on_delete=django.db.models.deletion.CASCADE, related_name='depreciation_schedule', to='assets.asset')),
            ],
            options={
                'verbose_name': 'Asset Depreciation Schedule',
                'verbose_name_plural': 'Asset Depreciation Schedules',
                'db_table': 'asset_depreciation_schedule',
                'ordering': ['asset', 'period_start_date'],
            },
        ),
        migrations.CreateModel(
            name='AssetMaintenanceRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('maintenance_type', models.CharField(choices=[('PREVENTIVE', 'Preventive Maintenance'), ('CORRECTIVE', 'Corrective/Repair'), ('UPGRADE', 'Upgrade'), ('INSPECTION', 'Inspection'), ('CALIBRATION', 'Calibration')], help_text='Type of maintenance', max_length=20)),
                ('maintenance_date', models.DateField(help_text='Date of maintenance')),
                ('performed_by', models.CharField(help_text='Person/team who performed maintenance', max_length=100)),
                ('is_internal', models.BooleanField(default=True, help_text='Was maintenance done internally?')),
                ('cost', models.DecimalField(blank=True, decimal_places=2, help_text='Maintenance cost', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('description', models.TextField(help_text='Description of work performed')),
                ('issues_found', models.TextField(blank=True, help_text='Issues found during maintenance', null=True)),
                ('actions_taken', models.TextField(blank=True, help_text='Actions taken / repairs made', null=True)),
                ('parts_replaced', models.JSONField(blank=True, help_text='JSON array of parts replaced', null=True)),
                ('next_maintenance_date', models.DateField(blank=True, help_text='Next scheduled maintenance date', null=True)),
                ('downtime_hours', models.DecimalField(blank=True, decimal_places=2, help_text='Hours of downtime', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('attachments', models.JSONField(blank=True, help_text='File attachments (photos, invoices, reports)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('asset', models.ForeignKey(help_text='Asset', on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_records', to='assets.asset')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='maintenance_records_created', to=settings.AUTH_USER_MODEL)),
                ('currency', models.ForeignKey(blank=True, help_text='Currency', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.currency')),
                ('vendor', models.ForeignKey(blank=True, help_text='External vendor (if applicable)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asset_maintenance', to='inventory.supplier')),
            ],
            options={
                'verbose_name': 'Asset Maintenance Record',
                'verbose_name_plural': 'Asset Maintenance Records',
                'db_table': 'asset_maintenance_records',
                'ordering': ['-maintenance_date'],
            },
        ),
        migrations.AddIndex(
            model_name='asset',
            index=models.Index(fields=['asset_tag'], name='assets_asset_t_3d9023_idx'),
        ),
        migrations.AddIndex(
            model_name='asset',
            index=models.Index(fields=['serial_no'], name='assets_serial__075e86_idx'),
        ),
        migrations.AddIndex(
            model_name='asset',
            index=models.Index(fields=['item', 'current_status'], name='assets_item_id_8666c5_idx'),
        ),
        migrations.AddIndex(
            model_name='asset',
            index=models.Index(fields=['assigned_to_user', 'current_status'], name='assets_assigne_dc220e_idx'),
        ),
        migrations.AddIndex(
            model_name='asset',
            index=models.Index(fields=['current_status', 'is_active'], name='assets_current_ef27d1_idx'),
        ),
        migrations.AddIndex(
            model_name='asset',
            index=models.Index(fields=['next_maintenance_date'], name='assets_next_ma_992b64_idx'),
        ),
        migrations.AddIndex(
            model_name='asset',
            index=models.Index(fields=['warranty_end_date'], name='assets_warrant_2ebb53_idx'),
        ),
        migrations.AddIndex(
            model_name='assetassignmenthistory',
            index=models.Index(fields=['asset', '-assigned_at'], name='asset_assig_asset_i_20f77d_idx'),
        ),
        migrations.AddIndex(
            model_name='assetassignmenthistory',
            index=models.Index(fields=['to_user', '-assigned_at'], name='asset_assig_to_user_c39ce9_idx'),
        ),
        migrations.AddIndex(
            model_name='assetassignmenthistory',
            index=models.Index(fields=['assignment_type'], name='asset_assig_assignm_d0b246_idx'),
        ),
        migrations.AddIndex(
            model_name='assetdepreciationschedule',
            index=models.Index(fields=['asset', 'period_start_date'], name='asset_depre_asset_i_c32409_idx'),
        ),
        migrations.AddIndex(
            model_name='assetdepreciationschedule',
            index=models.Index(fields=['is_posted'], name='asset_depre_is_post_45f206_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='assetdepreciationschedule',
            unique_together={('asset', 'period_start_date')},
        ),
        migrations.AddIndex(
            model_name='assetmaintenancerecord',
            index=models.Index(fields=['asset', '-maintenance_date'], name='asset_maint_asset_i_35cade_idx'),
        ),
        migrations.AddIndex(
            model_name='assetmaintenancerecord',
            index=models.Index(fields=['maintenance_type', '-maintenance_date'], name='asset_maint_mainten_445835_idx'),
        ),
        migrations.AddIndex(
            model_name='assetmaintenancerecord',
            index=models.Index(fields=['next_maintenance_date'], name='asset_maint_next_ma_4ec1dc_idx'),
        ),
    ]
