# Generated by Django 5.0.1 on 2025-10-25 10:39

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('color_code', models.CharField(help_text='Unique color code', max_length=20, unique=True)),
                ('color_name', models.CharField(help_text="Color name (e.g., 'Navy Blue', 'Red')", max_length=100)),
                ('pantone_code', models.CharField(blank=True, help_text='Pantone color code', max_length=20, null=True)),
                ('hex_code', models.CharField(blank=True, help_text='Hex color code (e.g., #FF5733)', max_length=7, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Color',
                'verbose_name_plural': 'Colors',
                'db_table': 'colors',
                'ordering': ['color_name'],
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('currency_code', models.CharField(help_text='ISO 4217 currency code (e.g., BDT, USD, EUR)', max_length=3, unique=True)),
                ('symbol', models.CharField(blank=True, help_text='Currency symbol (e.g., ৳, $, €)', max_length=10, null=True)),
                ('name', models.CharField(help_text='Currency name', max_length=50)),
                ('is_base_currency', models.BooleanField(default=False, help_text='Is this the base currency for the system?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Currency',
                'verbose_name_plural': 'Currencies',
                'db_table': 'currencies',
                'ordering': ['currency_code'],
            },
        ),
        migrations.CreateModel(
            name='Size',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('size_code', models.CharField(help_text='Size code (e.g., XS, S, M, L, XL, XXL)', max_length=10, unique=True)),
                ('description', models.CharField(blank=True, help_text='Size description', max_length=50, null=True)),
                ('sequence', models.IntegerField(default=0, help_text='Sequence for sorting (1=XS, 2=S, 3=M, etc.)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Size',
                'verbose_name_plural': 'Sizes',
                'db_table': 'sizes',
                'ordering': ['sequence', 'size_code'],
            },
        ),
        migrations.CreateModel(
            name='UnitOfMeasurement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('uom_code', models.CharField(help_text='UOM code (e.g., KG, PCS, MTR)', max_length=10, unique=True)),
                ('name', models.CharField(help_text='Full name of UOM', max_length=50)),
                ('description', models.TextField(blank=True, help_text='Description of UOM', null=True)),
                ('uom_type', models.CharField(blank=True, choices=[('WEIGHT', 'Weight'), ('LENGTH', 'Length'), ('QUANTITY', 'Quantity'), ('VOLUME', 'Volume'), ('AREA', 'Area')], help_text='Type of measurement', max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Unit of Measurement',
                'verbose_name_plural': 'Units of Measurement',
                'db_table': 'uoms',
                'ordering': ['uom_code'],
            },
        ),
        migrations.CreateModel(
            name='Buyer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier (UUID)', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when record was last updated')),
                ('created_by', models.UUIDField(blank=True, help_text='User who created this record', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User who last updated this record', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when record was soft-deleted', null=True)),
                ('deleted_by', models.UUIDField(blank=True, help_text='User who deleted this record', null=True)),
                ('buyer_code', models.CharField(help_text='Unique buyer code', max_length=20, unique=True)),
                ('name', models.CharField(help_text='Buyer name', max_length=200)),
                ('contact_person', models.CharField(blank=True, help_text='Contact person', max_length=100, null=True)),
                ('phone', models.CharField(blank=True, help_text='Phone number', max_length=20, null=True)),
                ('email', models.EmailField(blank=True, help_text='Email address', max_length=254, null=True)),
                ('address', models.TextField(blank=True, help_text='Address', null=True)),
                ('country', models.CharField(blank=True, help_text='Country', max_length=50, null=True)),
                ('payment_terms', models.CharField(blank=True, help_text='Payment terms', max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is buyer active?')),
            ],
            options={
                'verbose_name': 'Buyer',
                'verbose_name_plural': 'Buyers',
                'db_table': 'buyers',
                'ordering': ['buyer_code'],
                'indexes': [models.Index(fields=['buyer_code'], name='buyers_buyer_c_04de44_idx'), models.Index(fields=['name'], name='buyers_name_21f485_idx')],
            },
        ),
        migrations.CreateModel(
            name='ItemCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier (UUID)', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when record was last updated')),
                ('created_by', models.UUIDField(blank=True, help_text='User who created this record', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User who last updated this record', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when record was soft-deleted', null=True)),
                ('deleted_by', models.UUIDField(blank=True, help_text='User who deleted this record', null=True)),
                ('category_code', models.CharField(help_text='Unique category code', max_length=20, unique=True)),
                ('name', models.CharField(help_text='Category name', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Category description', null=True)),
                ('category_type', models.CharField(blank=True, choices=[('YARN', 'Yarn'), ('FABRIC', 'Fabric'), ('ACCESSORIES', 'Accessories'), ('GENERAL', 'General'), ('SPARES', 'Spare Parts'), ('IT', 'IT Equipment')], help_text='Type of category', max_length=20, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is category active?')),
                ('parent_category', models.ForeignKey(blank=True, help_text='Parent category', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='sub_categories', to='inventory.itemcategory')),
            ],
            options={
                'verbose_name': 'Item Category',
                'verbose_name_plural': 'Item Categories',
                'db_table': 'item_categories',
                'ordering': ['category_code'],
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier (UUID)', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when record was last updated')),
                ('created_by', models.UUIDField(blank=True, help_text='User who created this record', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User who last updated this record', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when record was soft-deleted', null=True)),
                ('deleted_by', models.UUIDField(blank=True, help_text='User who deleted this record', null=True)),
                ('sku', models.CharField(help_text='Stock Keeping Unit (unique identifier)', max_length=50, unique=True, verbose_name='SKU')),
                ('item_name', models.CharField(help_text='Item name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Detailed description', null=True)),
                ('brand', models.CharField(blank=True, help_text='Brand name', max_length=100, null=True)),
                ('manufacturer', models.CharField(blank=True, help_text='Manufacturer name', max_length=100, null=True)),
                ('reorder_level', models.DecimalField(decimal_places=3, default=0, help_text='Minimum stock before reorder alert', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('safety_stock', models.DecimalField(decimal_places=3, default=0, help_text='Buffer stock to prevent shortages', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('min_stock_qty', models.DecimalField(decimal_places=3, default=0, help_text='Minimum stock quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('max_stock_qty', models.DecimalField(blank=True, decimal_places=3, help_text='Maximum stock quantity', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('lead_time_days', models.IntegerField(default=0, help_text='Lead time in days', validators=[django.core.validators.MinValueValidator(0)])),
                ('is_serialized', models.BooleanField(default=False, help_text='Track by serial number?')),
                ('is_batch_controlled', models.BooleanField(default=False, help_text='Track by batch/lot number?')),
                ('is_asset', models.BooleanField(default=False, help_text='Is this a fixed asset?')),
                ('is_consumable', models.BooleanField(default=True, help_text='Is this a consumable item?')),
                ('shelf_life_days', models.IntegerField(blank=True, help_text='Shelf life in days (for expirable items)', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('valuation_method', models.CharField(choices=[('FIFO', 'First In, First Out'), ('AVERAGE', 'Weighted Average'), ('STANDARD', 'Standard Cost')], default='FIFO', help_text='Stock valuation method', max_length=20)),
                ('last_purchase_price', models.DecimalField(blank=True, decimal_places=2, help_text='Last purchase price', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('avg_purchase_price', models.DecimalField(blank=True, decimal_places=2, help_text='Average purchase price', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('standard_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Standard cost', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('hsn_code', models.CharField(blank=True, help_text='Harmonized System Nomenclature code for tax/customs', max_length=20, null=True, verbose_name='HSN Code')),
                ('is_active', models.BooleanField(default=True, help_text='Is item active?')),
                ('discontinued_date', models.DateField(blank=True, help_text='Date when item was discontinued', null=True)),
                ('category', models.ForeignKey(help_text='Item category', on_delete=django.db.models.deletion.PROTECT, related_name='items', to='inventory.itemcategory')),
                ('default_uom', models.ForeignKey(help_text='Default unit of measurement', on_delete=django.db.models.deletion.PROTECT, related_name='items', to='inventory.unitofmeasurement')),
            ],
            options={
                'verbose_name': 'Item',
                'verbose_name_plural': 'Items',
                'db_table': 'items',
                'ordering': ['sku'],
            },
        ),
        migrations.CreateModel(
            name='StatusMaster',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier (UUID)', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when record was last updated')),
                ('created_by', models.UUIDField(blank=True, help_text='User who created this record', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User who last updated this record', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when record was soft-deleted', null=True)),
                ('deleted_by', models.UUIDField(blank=True, help_text='User who deleted this record', null=True)),
                ('entity_type', models.CharField(choices=[('PR', 'Purchase Request'), ('PO', 'Purchase Order'), ('GRN', 'Goods Received Note'), ('TRANSFER', 'Stock Transfer'), ('ISSUE', 'Stock Issue'), ('ADJUSTMENT', 'Inventory Adjustment'), ('WORK_ORDER', 'Work Order')], help_text='Entity type this status applies to', max_length=50)),
                ('status_code', models.CharField(help_text="Status code (e.g., 'DRAFT', 'APPROVED')", max_length=50)),
                ('status_label', models.CharField(help_text='Human-readable status label', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Status description', null=True)),
                ('sequence', models.IntegerField(default=0, help_text='Display sequence in workflows')),
                ('color_code', models.CharField(blank=True, help_text='Hex color code for UI (e.g., #28a745)', max_length=7, null=True)),
                ('icon', models.CharField(blank=True, help_text='Icon identifier for UI', max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is status active?')),
                ('is_system_status', models.BooleanField(default=False, help_text='System status (cannot be modified/deleted)')),
            ],
            options={
                'verbose_name': 'Status',
                'verbose_name_plural': 'Statuses',
                'db_table': 'status_master',
                'ordering': ['entity_type', 'sequence'],
                'indexes': [models.Index(fields=['entity_type', 'status_code'], name='status_mast_entity__092ad9_idx')],
                'unique_together': {('entity_type', 'status_code')},
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier (UUID)', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when record was last updated')),
                ('created_by', models.UUIDField(blank=True, help_text='User who created this record', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User who last updated this record', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when record was soft-deleted', null=True)),
                ('deleted_by', models.UUIDField(blank=True, help_text='User who deleted this record', null=True)),
                ('supplier_code', models.CharField(help_text='Unique supplier code', max_length=20, unique=True)),
                ('name', models.CharField(help_text='Supplier name', max_length=200)),
                ('contact_person', models.CharField(blank=True, help_text='Contact person name', max_length=100, null=True)),
                ('phone', models.CharField(blank=True, help_text='Phone number', max_length=20, null=True)),
                ('email', models.EmailField(blank=True, help_text='Email address', max_length=254, null=True)),
                ('address', models.TextField(blank=True, help_text='Address', null=True)),
                ('city', models.CharField(blank=True, help_text='City', max_length=100, null=True)),
                ('country', models.CharField(default='Bangladesh', help_text='Country', max_length=50)),
                ('tin_vat', models.CharField(blank=True, help_text='Tax Identification Number / VAT Number', max_length=50, null=True, verbose_name='TIN/VAT')),
                ('payment_terms', models.CharField(blank=True, help_text="Payment terms (e.g., '30 days', 'Advance', 'LC')", max_length=100, null=True)),
                ('credit_limit', models.DecimalField(blank=True, decimal_places=2, help_text='Credit limit', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('supplier_type', models.CharField(blank=True, choices=[('YARN', 'Yarn Supplier'), ('FABRIC', 'Fabric Supplier'), ('ACCESSORIES', 'Accessories Supplier'), ('GENERAL', 'General Supplier'), ('SERVICE', 'Service Provider')], help_text='Type of supplier', max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is supplier active?')),
                ('rating', models.DecimalField(blank=True, decimal_places=2, help_text='Supplier rating (0-5)', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('currency', models.ForeignKey(blank=True, help_text='Default currency', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.currency')),
            ],
            options={
                'verbose_name': 'Supplier',
                'verbose_name_plural': 'Suppliers',
                'db_table': 'suppliers',
                'ordering': ['supplier_code'],
            },
        ),
        migrations.CreateModel(
            name='ItemSupplier',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('lead_time_days', models.IntegerField(default=0, help_text='Lead time in days', validators=[django.core.validators.MinValueValidator(0)])),
                ('min_order_qty', models.DecimalField(blank=True, decimal_places=3, help_text='Minimum order quantity', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('last_purchase_price', models.DecimalField(blank=True, decimal_places=2, help_text='Last purchase price', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('last_purchase_date', models.DateField(blank=True, help_text='Last purchase date', null=True)),
                ('is_preferred', models.BooleanField(default=False, help_text='Is this the preferred supplier for this item?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('item', models.ForeignKey(help_text='Item', on_delete=django.db.models.deletion.CASCADE, related_name='item_suppliers', to='inventory.item')),
                ('supplier', models.ForeignKey(help_text='Supplier', on_delete=django.db.models.deletion.CASCADE, related_name='supplied_items', to='inventory.supplier')),
            ],
            options={
                'verbose_name': 'Item Supplier',
                'verbose_name_plural': 'Item Suppliers',
                'db_table': 'item_suppliers',
            },
        ),
        migrations.CreateModel(
            name='SupplierEvaluation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('evaluation_date', models.DateField(help_text='Evaluation date')),
                ('on_time_delivery_score', models.DecimalField(decimal_places=2, help_text='On-time delivery score (0-5)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('quality_score', models.DecimalField(decimal_places=2, help_text='Quality score (0-5)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('price_competitiveness_score', models.DecimalField(decimal_places=2, help_text='Price competitiveness score (0-5)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('communication_score', models.DecimalField(decimal_places=2, help_text='Communication score (0-5)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('overall_rating', models.DecimalField(decimal_places=2, help_text='Overall rating (0-5)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('remarks', models.TextField(blank=True, help_text='Evaluation remarks', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('evaluated_by', models.ForeignKey(blank=True, help_text='Evaluator', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('supplier', models.ForeignKey(help_text='Supplier', on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='inventory.supplier')),
            ],
            options={
                'verbose_name': 'Supplier Evaluation',
                'verbose_name_plural': 'Supplier Evaluations',
                'db_table': 'supplier_evaluations',
                'ordering': ['-evaluation_date'],
            },
        ),
        migrations.CreateModel(
            name='ItemUOMConversion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('conversion_factor', models.DecimalField(decimal_places=6, help_text='Conversion factor (e.g., 1 ROLL = 40 MTR, factor = 40)', max_digits=15, validators=[django.core.validators.MinValueValidator(1e-06)])),
                ('is_active', models.BooleanField(default=True, help_text='Is conversion active?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(help_text='Item', on_delete=django.db.models.deletion.CASCADE, related_name='uom_conversions', to='inventory.item')),
                ('from_uom', models.ForeignKey(help_text='From UOM', on_delete=django.db.models.deletion.PROTECT, related_name='conversions_from', to='inventory.unitofmeasurement')),
                ('to_uom', models.ForeignKey(help_text='To UOM', on_delete=django.db.models.deletion.PROTECT, related_name='conversions_to', to='inventory.unitofmeasurement')),
            ],
            options={
                'verbose_name': 'Item UOM Conversion',
                'verbose_name_plural': 'Item UOM Conversions',
                'db_table': 'item_uom_conversions',
            },
        ),
        migrations.CreateModel(
            name='ExchangeRate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rate', models.DecimalField(decimal_places=6, help_text='Exchange rate', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('effective_date', models.DateField(help_text='Date from which this rate is effective')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this rate', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('from_currency', models.ForeignKey(help_text='Source currency', on_delete=django.db.models.deletion.PROTECT, related_name='exchange_rates_from', to='inventory.currency')),
                ('to_currency', models.ForeignKey(help_text='Target currency', on_delete=django.db.models.deletion.PROTECT, related_name='exchange_rates_to', to='inventory.currency')),
            ],
            options={
                'verbose_name': 'Exchange Rate',
                'verbose_name_plural': 'Exchange Rates',
                'db_table': 'exchange_rates',
                'ordering': ['-effective_date'],
                'indexes': [models.Index(fields=['from_currency', 'to_currency', '-effective_date'], name='exchange_ra_from_cu_ea8bc0_idx')],
                'unique_together': {('from_currency', 'to_currency', 'effective_date')},
            },
        ),
        migrations.CreateModel(
            name='Style',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier (UUID)', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when record was last updated')),
                ('created_by', models.UUIDField(blank=True, help_text='User who created this record', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User who last updated this record', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when record was soft-deleted', null=True)),
                ('deleted_by', models.UUIDField(blank=True, help_text='User who deleted this record', null=True)),
                ('style_code', models.CharField(help_text='Unique style code', max_length=50, unique=True)),
                ('style_name', models.CharField(help_text='Style name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Style description', null=True)),
                ('season', models.CharField(blank=True, help_text="Season (e.g., 'Spring 2025', 'Winter 2024')", max_length=50, null=True)),
                ('garment_type', models.CharField(blank=True, help_text='Garment type (T-Shirt, Trouser, Jacket, etc.)', max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is style active?')),
                ('buyer', models.ForeignKey(help_text='Buyer', on_delete=django.db.models.deletion.PROTECT, related_name='styles', to='inventory.buyer')),
            ],
            options={
                'verbose_name': 'Style',
                'verbose_name_plural': 'Styles',
                'db_table': 'styles',
                'ordering': ['style_code'],
                'indexes': [models.Index(fields=['buyer', 'is_active'], name='styles_buyer_i_98abcc_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='supplier',
            index=models.Index(fields=['supplier_code'], name='suppliers_supplie_e2938c_idx'),
        ),
        migrations.AddIndex(
            model_name='supplier',
            index=models.Index(fields=['name'], name='suppliers_name_ed482a_idx'),
        ),
        migrations.AddIndex(
            model_name='supplier',
            index=models.Index(fields=['is_active'], name='suppliers_is_acti_a163b0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='itemsupplier',
            unique_together={('item', 'supplier')},
        ),
        migrations.AlterUniqueTogether(
            name='itemuomconversion',
            unique_together={('item', 'from_uom', 'to_uom')},
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['sku'], name='items_sku_0a66c0_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['category', 'is_active'], name='items_categor_9fd567_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['is_active'], name='items_is_acti_0dc7a3_idx'),
        ),
    ]
