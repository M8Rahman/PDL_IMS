# Generated by Django 5.0.1 on 2025-10-25 11:11

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('inventory', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PurchaseOrder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier (UUID)', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when record was last updated')),
                ('created_by', models.UUIDField(blank=True, help_text='User who created this record', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User who last updated this record', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when record was soft-deleted', null=True)),
                ('deleted_by', models.UUIDField(blank=True, help_text='User who deleted this record', null=True)),
                ('po_number', models.CharField(help_text='Unique PO number', max_length=50, unique=True)),
                ('po_date', models.DateField(help_text='PO date')),
                ('delivery_date', models.DateField(help_text='Expected delivery date')),
                ('payment_terms', models.CharField(blank=True, help_text='Payment terms', max_length=100, null=True)),
                ('delivery_address', models.TextField(blank=True, help_text='Delivery address', null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SUBMITTED', 'Submitted'), ('APPROVED', 'Approved'), ('SENT_TO_SUPPLIER', 'Sent to Supplier'), ('PARTIALLY_RECEIVED', 'Partially Received'), ('FULLY_RECEIVED', 'Fully Received'), ('CLOSED', 'Closed'), ('CANCELLED', 'Cancelled')], default='DRAFT', help_text='PO status', max_length=20)),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Total amount before taxes', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('exchange_rate', models.DecimalField(decimal_places=6, default=1.0, help_text='Exchange rate to base currency', max_digits=15)),
                ('total_amount_bdt', models.DecimalField(blank=True, decimal_places=2, help_text='Total amount in BDT', max_digits=15, null=True)),
                ('vat_percentage', models.DecimalField(decimal_places=2, default=0, help_text='VAT percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('vat_amount', models.DecimalField(decimal_places=2, default=0, help_text='VAT amount', max_digits=15)),
                ('tax_percentage', models.DecimalField(decimal_places=2, default=0, help_text='Tax percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, help_text='Tax amount', max_digits=15)),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=0, help_text='Discount percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, help_text='Discount amount', max_digits=15)),
                ('grand_total', models.DecimalField(blank=True, decimal_places=2, help_text='Grand total (after taxes and discounts)', max_digits=15, null=True)),
                ('terms_and_conditions', models.TextField(blank=True, help_text='Terms and conditions', null=True)),
                ('approved_at', models.DateTimeField(blank=True, help_text='Approval timestamp', null=True)),
                ('approved_by', models.ForeignKey(blank=True, help_text='Approver', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_pos', to=settings.AUTH_USER_MODEL)),
                ('currency', models.ForeignKey(help_text='Currency', on_delete=django.db.models.deletion.PROTECT, to='inventory.currency')),
                ('factory', models.ForeignKey(help_text='Factory', on_delete=django.db.models.deletion.PROTECT, related_name='purchase_orders', to='core.factory')),
                ('supplier', models.ForeignKey(help_text='Supplier', on_delete=django.db.models.deletion.PROTECT, related_name='purchase_orders', to='inventory.supplier')),
            ],
            options={
                'verbose_name': 'Purchase Order',
                'verbose_name_plural': 'Purchase Orders',
                'db_table': 'purchase_orders',
                'ordering': ['-po_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GoodsReceivedNote',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier (UUID)', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when record was last updated')),
                ('created_by', models.UUIDField(blank=True, help_text='User who created this record', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User who last updated this record', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when record was soft-deleted', null=True)),
                ('deleted_by', models.UUIDField(blank=True, help_text='User who deleted this record', null=True)),
                ('grn_number', models.CharField(help_text='Unique GRN number', max_length=50, unique=True)),
                ('grn_date', models.DateField(help_text='GRN date')),
                ('received_at', models.DateTimeField(auto_now_add=True, help_text='Receipt timestamp')),
                ('delivery_challan_no', models.CharField(blank=True, help_text='Delivery challan number', max_length=50, null=True)),
                ('delivery_challan_date', models.DateField(blank=True, help_text='Delivery challan date', null=True)),
                ('vehicle_no', models.CharField(blank=True, help_text='Vehicle number', max_length=50, null=True)),
                ('transporter_name', models.CharField(blank=True, help_text='Transporter/carrier name', max_length=100, null=True)),
                ('qc_status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('PASSED', 'Passed'), ('REJECTED', 'Rejected'), ('PARTIAL', 'Partial Pass')], default='PENDING', help_text='QC status', max_length=20)),
                ('qc_at', models.DateTimeField(blank=True, help_text='QC timestamp', null=True)),
                ('total_value', models.DecimalField(blank=True, decimal_places=2, help_text='Total value', max_digits=15, null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SUBMITTED', 'Submitted'), ('QC_PENDING', 'QC Pending'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected'), ('POSTED', 'Posted to Stock')], default='DRAFT', help_text='GRN status', max_length=20)),
                ('remarks', models.TextField(blank=True, help_text='Remarks', null=True)),
                ('currency', models.ForeignKey(blank=True, help_text='Currency', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.currency')),
                ('factory', models.ForeignKey(help_text='Factory', on_delete=django.db.models.deletion.PROTECT, related_name='grns', to='core.factory')),
                ('qc_by', models.ForeignKey(blank=True, help_text='QC inspector', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='qc_grns', to=settings.AUTH_USER_MODEL)),
                ('received_by', models.ForeignKey(help_text='User who received the goods', on_delete=django.db.models.deletion.PROTECT, related_name='received_grns', to=settings.AUTH_USER_MODEL)),
                ('supplier', models.ForeignKey(help_text='Supplier', on_delete=django.db.models.deletion.PROTECT, related_name='grns', to='inventory.supplier')),
                ('po', models.ForeignKey(blank=True, help_text='Purchase order', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='grns', to='procurement.purchaseorder')),
            ],
            options={
                'verbose_name': 'Goods Received Note',
                'verbose_name_plural': 'Goods Received Notes',
                'db_table': 'goods_received_notes',
                'ordering': ['-grn_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrderLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ordered_qty', models.DecimalField(decimal_places=3, help_text='Ordered quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(0.001)])),
                ('received_qty', models.DecimalField(decimal_places=3, default=0, help_text='Received quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('pending_qty', models.DecimalField(decimal_places=3, help_text='Pending quantity (calculated)', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Unit price', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_price', models.DecimalField(decimal_places=2, help_text='Total price (qty × price)', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('delivery_date', models.DateField(blank=True, help_text='Expected delivery date', null=True)),
                ('specification', models.TextField(blank=True, help_text='Item specifications', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PARTIALLY_RECEIVED', 'Partially Received'), ('FULLY_RECEIVED', 'Fully Received'), ('CLOSED', 'Closed')], default='PENDING', help_text='Line status', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('item', models.ForeignKey(help_text='Item', on_delete=django.db.models.deletion.PROTECT, related_name='po_lines', to='inventory.item')),
                ('po', models.ForeignKey(help_text='Purchase order', on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='procurement.purchaseorder')),
                ('uom', models.ForeignKey(help_text='Unit of measurement', on_delete=django.db.models.deletion.PROTECT, to='inventory.unitofmeasurement')),
            ],
            options={
                'verbose_name': 'Purchase Order Line',
                'verbose_name_plural': 'Purchase Order Lines',
                'db_table': 'purchase_order_lines',
                'ordering': ['po', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='GRNLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ordered_qty', models.DecimalField(blank=True, decimal_places=3, help_text='Ordered quantity (from PO)', max_digits=15, null=True)),
                ('received_qty', models.DecimalField(decimal_places=3, help_text='Received quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(0.001)])),
                ('accepted_qty', models.DecimalField(decimal_places=3, default=0, help_text='Accepted quantity (after QC)', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('rejected_qty', models.DecimalField(decimal_places=3, default=0, help_text='Rejected quantity (after QC)', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Unit price', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_price', models.DecimalField(decimal_places=2, help_text='Total price', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('batch_no', models.CharField(blank=True, help_text='Batch number', max_length=50, null=True)),
                ('lot_no', models.CharField(blank=True, help_text='Lot number', max_length=50, null=True)),
                ('serial_no', models.CharField(blank=True, help_text='Serial number (for serialized items)', max_length=50, null=True)),
                ('manufacture_date', models.DateField(blank=True, help_text='Manufacture date', null=True)),
                ('expiry_date', models.DateField(blank=True, help_text='Expiry date', null=True)),
                ('qc_status', models.CharField(choices=[('PENDING', 'Pending'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected'), ('HOLD', 'On Hold')], default='PENDING', help_text='QC status', max_length=20)),
                ('qc_remarks', models.TextField(blank=True, help_text='QC remarks', null=True)),
                ('rejection_reason', models.TextField(blank=True, help_text='Rejection reason', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('grn', models.ForeignKey(help_text='Goods received note', on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='procurement.goodsreceivednote')),
                ('item', models.ForeignKey(help_text='Item', on_delete=django.db.models.deletion.PROTECT, related_name='grn_lines', to='inventory.item')),
                ('location', models.ForeignKey(blank=True, help_text='Storage location', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.location')),
                ('uom', models.ForeignKey(help_text='Unit of measurement', on_delete=django.db.models.deletion.PROTECT, to='inventory.unitofmeasurement')),
                ('po_line', models.ForeignKey(blank=True, help_text='Source PO line', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='grn_lines', to='procurement.purchaseorderline')),
            ],
            options={
                'verbose_name': 'GRN Line',
                'verbose_name_plural': 'GRN Lines',
                'db_table': 'grn_lines',
                'ordering': ['grn', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier (UUID)', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when record was last updated')),
                ('created_by', models.UUIDField(blank=True, help_text='User who created this record', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User who last updated this record', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when record was soft-deleted', null=True)),
                ('deleted_by', models.UUIDField(blank=True, help_text='User who deleted this record', null=True)),
                ('pr_number', models.CharField(help_text='Unique PR number', max_length=50, unique=True)),
                ('request_type', models.CharField(choices=[('EXTERNAL', 'External Purchase'), ('INTERNAL', 'Internal Issue')], default='EXTERNAL', help_text='Type of request', max_length=20)),
                ('request_date', models.DateField(help_text='Date of request')),
                ('required_by_date', models.DateField(blank=True, help_text='Date items are needed by', null=True)),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('NORMAL', 'Normal'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='NORMAL', help_text='Priority level', max_length=20)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SUBMITTED', 'Submitted'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('CONVERTED_TO_PO', 'Converted to PO'), ('CANCELLED', 'Cancelled')], default='DRAFT', help_text='Current status', max_length=20)),
                ('justification', models.TextField(blank=True, help_text='Justification for the request', null=True)),
                ('total_estimated_value', models.DecimalField(blank=True, decimal_places=2, help_text='Total estimated value', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('approved_at', models.DateTimeField(blank=True, help_text='Approval timestamp', null=True)),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason for rejection', null=True)),
                ('approved_by', models.ForeignKey(blank=True, help_text='User who approved this PR', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_prs', to=settings.AUTH_USER_MODEL)),
                ('currency', models.ForeignKey(blank=True, help_text='Currency', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.currency')),
                ('department', models.ForeignKey(blank=True, help_text='Requesting department', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='purchase_requests', to='core.department')),
                ('factory', models.ForeignKey(help_text='Factory', on_delete=django.db.models.deletion.PROTECT, related_name='purchase_requests', to='core.factory')),
                ('requester', models.ForeignKey(help_text='User who created this PR', on_delete=django.db.models.deletion.PROTECT, related_name='purchase_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Purchase Request',
                'verbose_name_plural': 'Purchase Requests',
                'db_table': 'purchase_requests',
                'ordering': ['-request_date', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='purchaseorder',
            name='pr',
            field=models.ForeignKey(blank=True, help_text='Source purchase request', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purchase_orders', to='procurement.purchaserequest'),
        ),
        migrations.CreateModel(
            name='PurchaseRequestLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('requested_qty', models.DecimalField(decimal_places=3, help_text='Requested quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(0.001)])),
                ('estimated_unit_price', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated unit price', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('estimated_total', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated total (qty × price)', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('required_by_date', models.DateField(blank=True, help_text='Date item is needed by', null=True)),
                ('specification', models.TextField(blank=True, help_text='Item specifications', null=True)),
                ('justification', models.TextField(blank=True, help_text='Justification for this item', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('CONVERTED', 'Converted to PO')], default='PENDING', help_text='Line status', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(help_text='Item', on_delete=django.db.models.deletion.PROTECT, related_name='pr_lines', to='inventory.item')),
                ('pr', models.ForeignKey(help_text='Purchase request', on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='procurement.purchaserequest')),
                ('uom', models.ForeignKey(help_text='Unit of measurement', on_delete=django.db.models.deletion.PROTECT, to='inventory.unitofmeasurement')),
            ],
            options={
                'verbose_name': 'Purchase Request Line',
                'verbose_name_plural': 'Purchase Request Lines',
                'db_table': 'purchase_request_lines',
                'ordering': ['pr', 'created_at'],
            },
        ),
        migrations.AddField(
            model_name='purchaseorderline',
            name='pr_line',
            field=models.ForeignKey(blank=True, help_text='Source PR line', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='po_lines', to='procurement.purchaserequestline'),
        ),
        migrations.CreateModel(
            name='QCInspection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier (UUID)', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when record was last updated')),
                ('created_by', models.UUIDField(blank=True, help_text='User who created this record', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User who last updated this record', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when record was soft-deleted', null=True)),
                ('deleted_by', models.UUIDField(blank=True, help_text='User who deleted this record', null=True)),
                ('inspection_date', models.DateField(help_text='Inspection date')),
                ('inspection_type', models.CharField(blank=True, choices=[('VISUAL', 'Visual Inspection'), ('DIMENSIONAL', 'Dimensional Check'), ('FUNCTIONAL', 'Functional Test'), ('LAB_TEST', 'Laboratory Test')], help_text='Type of inspection', max_length=50, null=True)),
                ('overall_status', models.CharField(choices=[('PASS', 'Pass'), ('FAIL', 'Fail'), ('CONDITIONAL_PASS', 'Conditional Pass'), ('HOLD', 'Hold')], help_text='Overall inspection result', max_length=20)),
                ('defects_found', models.JSONField(blank=True, help_text='JSON array of defects found', null=True)),
                ('test_results', models.JSONField(blank=True, help_text='Lab test results (if applicable)', null=True)),
                ('remarks', models.TextField(blank=True, help_text='Inspector remarks', null=True)),
                ('attachments', models.JSONField(blank=True, help_text='File attachments (file paths)', null=True)),
                ('approved_at', models.DateTimeField(blank=True, help_text='Approval timestamp', null=True)),
                ('approved_by', models.ForeignKey(blank=True, help_text='Approver', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_qc_inspections', to=settings.AUTH_USER_MODEL)),
                ('grn', models.ForeignKey(help_text='Goods received note', on_delete=django.db.models.deletion.CASCADE, related_name='qc_inspections', to='procurement.goodsreceivednote')),
                ('inspector', models.ForeignKey(help_text='QC inspector', on_delete=django.db.models.deletion.PROTECT, related_name='qc_inspections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'QC Inspection',
                'verbose_name_plural': 'QC Inspections',
                'db_table': 'qc_inspections',
                'ordering': ['-inspection_date'],
            },
        ),
        migrations.CreateModel(
            name='StockBatch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('batch_no', models.CharField(help_text='Batch number', max_length=50)),
                ('lot_no', models.CharField(blank=True, help_text='Lot number', max_length=50, null=True)),
                ('manufacture_date', models.DateField(blank=True, help_text='Manufacture date', null=True)),
                ('expiry_date', models.DateField(blank=True, help_text='Expiry date', null=True)),
                ('qty_received', models.DecimalField(decimal_places=3, help_text='Original received quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('qty_on_hand', models.DecimalField(decimal_places=3, help_text='Current quantity on hand', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('qty_allocated', models.DecimalField(decimal_places=3, default=0, help_text='Quantity allocated (reserved)', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('qty_available', models.DecimalField(blank=True, decimal_places=3, help_text='Available quantity (on_hand - allocated)', max_digits=15, null=True)),
                ('unit_cost', models.DecimalField(decimal_places=2, help_text='Unit cost (for FIFO valuation)', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_value', models.DecimalField(decimal_places=2, help_text='Total value (qty × cost)', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('QUARANTINE', 'Quarantine'), ('EXPIRED', 'Expired'), ('CONSUMED', 'Consumed'), ('DISPOSED', 'Disposed')], default='ACTIVE', help_text='Batch status', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('grn_line', models.ForeignKey(blank=True, help_text='Source GRN line', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_batches', to='procurement.grnline')),
                ('item', models.ForeignKey(help_text='Item', on_delete=django.db.models.deletion.PROTECT, related_name='stock_batches', to='inventory.item')),
                ('location', models.ForeignKey(help_text='Storage location', on_delete=django.db.models.deletion.PROTECT, related_name='stock_batches', to='core.location')),
                ('uom', models.ForeignKey(help_text='Unit of measurement', on_delete=django.db.models.deletion.PROTECT, to='inventory.unitofmeasurement')),
            ],
            options={
                'verbose_name': 'Stock Batch',
                'verbose_name_plural': 'Stock Batches',
                'db_table': 'stock_batches',
                'ordering': ['item', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='StockMovement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('movement_type', models.CharField(choices=[('PURCHASE_IN', 'Purchase Receipt'), ('ISSUE_OUT', 'Issue to Department'), ('TRANSFER', 'Location Transfer'), ('ADJUSTMENT_IN', 'Adjustment Increase'), ('ADJUSTMENT_OUT', 'Adjustment Decrease'), ('RETURN_IN', 'Return to Stock'), ('RETURN_OUT', 'Return to Supplier'), ('SCRAP', 'Scrap/Disposal'), ('PRODUCTION_IN', 'Production Receipt'), ('PRODUCTION_OUT', 'Production Issue'), ('DAMAGE', 'Damage'), ('THEFT', 'Theft/Loss')], help_text='Type of movement', max_length=20)),
                ('reference_type', models.CharField(blank=True, help_text='Reference document type (GRN, PO, ISSUE, etc.)', max_length=50, null=True)),
                ('reference_id', models.UUIDField(blank=True, help_text='Reference document ID', null=True)),
                ('reference_number', models.CharField(blank=True, help_text='Reference document number', max_length=50, null=True)),
                ('serial_no', models.CharField(blank=True, help_text='Serial number (for serialized items)', max_length=50, null=True)),
                ('quantity', models.DecimalField(decimal_places=3, help_text='Movement quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(0.001)])),
                ('unit_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Unit cost at time of movement', max_digits=15, null=True)),
                ('total_value', models.DecimalField(blank=True, decimal_places=2, help_text='Total value (qty × cost)', max_digits=15, null=True)),
                ('fiscal_year', models.IntegerField(blank=True, help_text='Fiscal year', null=True)),
                ('fiscal_month', models.IntegerField(blank=True, help_text='Fiscal month', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('transaction_date', models.DateField(help_text='Transaction date')),
                ('transaction_time', models.DateTimeField(auto_now_add=True, help_text='Transaction timestamp')),
                ('approved_at', models.DateTimeField(blank=True, help_text='Approval timestamp', null=True)),
                ('reason_code', models.CharField(blank=True, help_text='Reason code for movement', max_length=50, null=True)),
                ('remarks', models.TextField(blank=True, help_text='Remarks', null=True)),
                ('is_reversed', models.BooleanField(default=False, help_text='Is this movement reversed?')),
                ('reversed_at', models.DateTimeField(blank=True, help_text='Reversal timestamp', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approved_by', models.ForeignKey(blank=True, help_text='Approver', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_movements_approved', to=settings.AUTH_USER_MODEL)),
                ('batch', models.ForeignKey(blank=True, help_text='Stock batch', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='movements', to='procurement.stockbatch')),
                ('created_by', models.ForeignKey(help_text='User who created this movement', on_delete=django.db.models.deletion.PROTECT, related_name='stock_movements_created', to=settings.AUTH_USER_MODEL)),
                ('from_location', models.ForeignKey(blank=True, help_text='Source location', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='stock_movements_from', to='core.location')),
                ('item', models.ForeignKey(help_text='Item', on_delete=django.db.models.deletion.PROTECT, related_name='stock_movements', to='inventory.item')),
                ('reversed_by', models.ForeignKey(blank=True, help_text='User who reversed this movement', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_movements_reversed', to=settings.AUTH_USER_MODEL)),
                ('to_location', models.ForeignKey(blank=True, help_text='Destination location', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='stock_movements_to', to='core.location')),
                ('uom', models.ForeignKey(help_text='Unit of measurement', on_delete=django.db.models.deletion.PROTECT, to='inventory.unitofmeasurement')),
            ],
            options={
                'verbose_name': 'Stock Movement',
                'verbose_name_plural': 'Stock Movements',
                'db_table': 'stock_movements',
                'ordering': ['-transaction_date', '-transaction_time'],
            },
        ),
        migrations.AddIndex(
            model_name='goodsreceivednote',
            index=models.Index(fields=['grn_number'], name='goods_recei_grn_num_b082ca_idx'),
        ),
        migrations.AddIndex(
            model_name='goodsreceivednote',
            index=models.Index(fields=['supplier', 'status'], name='goods_recei_supplie_f54d61_idx'),
        ),
        migrations.AddIndex(
            model_name='goodsreceivednote',
            index=models.Index(fields=['po', 'status'], name='goods_recei_po_id_6fa064_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaserequest',
            index=models.Index(fields=['pr_number'], name='purchase_re_pr_numb_3a5407_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaserequest',
            index=models.Index(fields=['status', 'factory'], name='purchase_re_status_1cbb08_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaserequest',
            index=models.Index(fields=['requester', 'status'], name='purchase_re_request_df45a4_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['po_number'], name='purchase_or_po_numb_656941_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['supplier', 'status'], name='purchase_or_supplie_8a71bd_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['factory', 'status'], name='purchase_or_factory_d9fdbd_idx'),
        ),
        migrations.AddIndex(
            model_name='stockbatch',
            index=models.Index(fields=['item', 'location'], name='stock_batch_item_id_8adf74_idx'),
        ),
        migrations.AddIndex(
            model_name='stockbatch',
            index=models.Index(fields=['batch_no'], name='stock_batch_batch_n_e3e6a7_idx'),
        ),
        migrations.AddIndex(
            model_name='stockbatch',
            index=models.Index(fields=['expiry_date'], name='stock_batch_expiry__ed4ab2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='stockbatch',
            unique_together={('item', 'batch_no', 'location')},
        ),
        migrations.AddIndex(
            model_name='stockmovement',
            index=models.Index(fields=['item', 'transaction_date'], name='stock_movem_item_id_d6066c_idx'),
        ),
        migrations.AddIndex(
            model_name='stockmovement',
            index=models.Index(fields=['movement_type', 'transaction_date'], name='stock_movem_movemen_bf0cd0_idx'),
        ),
        migrations.AddIndex(
            model_name='stockmovement',
            index=models.Index(fields=['from_location', 'transaction_date'], name='stock_movem_from_lo_dd7e9e_idx'),
        ),
        migrations.AddIndex(
            model_name='stockmovement',
            index=models.Index(fields=['to_location', 'transaction_date'], name='stock_movem_to_loca_a98a32_idx'),
        ),
        migrations.AddIndex(
            model_name='stockmovement',
            index=models.Index(fields=['reference_type', 'reference_id'], name='stock_movem_referen_a0d8b9_idx'),
        ),
    ]
