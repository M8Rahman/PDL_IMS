# Generated by Django 5.0.1 on 2025-10-26 08:26

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('inventory', '0001_initial'),
        ('procurement', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='InternalRequisition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier (UUID)', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when record was last updated')),
                ('created_by', models.UUIDField(blank=True, help_text='User who created this record', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User who last updated this record', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when record was soft-deleted', null=True)),
                ('deleted_by', models.UUIDField(blank=True, help_text='User who deleted this record', null=True)),
                ('requisition_number', models.CharField(help_text='Requisition number', max_length=50, unique=True)),
                ('requisition_date', models.DateField(help_text='Requisition date')),
                ('required_by_date', models.DateField(blank=True, help_text='Required by date', null=True)),
                ('purpose', models.CharField(blank=True, help_text='Purpose of requisition', max_length=200, null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SUBMITTED', 'Submitted'), ('APPROVED', 'Approved'), ('PARTIALLY_ISSUED', 'Partially Issued'), ('FULLY_ISSUED', 'Fully Issued'), ('REJECTED', 'Rejected'), ('CANCELLED', 'Cancelled')], default='DRAFT', help_text='Status', max_length=20)),
                ('approved_at', models.DateTimeField(blank=True, help_text='Approval timestamp', null=True)),
                ('rejection_reason', models.TextField(blank=True, help_text='Rejection reason', null=True)),
                ('remarks', models.TextField(blank=True, help_text='Remarks', null=True)),
                ('approved_by', models.ForeignKey(blank=True, help_text='Approver', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_internal_requisitions', to=settings.AUTH_USER_MODEL)),
                ('department', models.ForeignKey(help_text='Department', on_delete=django.db.models.deletion.PROTECT, related_name='internal_requisitions', to='core.department')),
                ('factory', models.ForeignKey(help_text='Factory', on_delete=django.db.models.deletion.PROTECT, related_name='internal_requisitions', to='core.factory')),
                ('requester', models.ForeignKey(help_text='Requester', on_delete=django.db.models.deletion.PROTECT, related_name='internal_requisitions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Internal Requisition',
                'verbose_name_plural': 'Internal Requisitions',
                'db_table': 'internal_requisitions',
                'ordering': ['-requisition_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InternalRequisitionLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('requested_qty', models.DecimalField(decimal_places=3, help_text='Requested quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(0.001)])),
                ('issued_qty', models.DecimalField(decimal_places=3, default=0, help_text='Issued quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('pending_qty', models.DecimalField(decimal_places=3, help_text='Pending quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('purpose', models.TextField(blank=True, help_text='Purpose', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('PARTIALLY_ISSUED', 'Partially Issued'), ('FULLY_ISSUED', 'Fully Issued'), ('REJECTED', 'Rejected')], default='PENDING', help_text='Line status', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('item', models.ForeignKey(help_text='Item', on_delete=django.db.models.deletion.PROTECT, related_name='internal_requisition_lines', to='inventory.item')),
                ('requisition', models.ForeignKey(help_text='Internal requisition', on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='production.internalrequisition')),
                ('uom', models.ForeignKey(help_text='Unit of measurement', on_delete=django.db.models.deletion.PROTECT, to='inventory.unitofmeasurement')),
            ],
            options={
                'verbose_name': 'Internal Requisition Line',
                'verbose_name_plural': 'Internal Requisition Lines',
                'db_table': 'internal_requisition_lines',
            },
        ),
        migrations.CreateModel(
            name='InventoryAdjustment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier (UUID)', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when record was last updated')),
                ('created_by', models.UUIDField(blank=True, help_text='User who created this record', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User who last updated this record', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when record was soft-deleted', null=True)),
                ('deleted_by', models.UUIDField(blank=True, help_text='User who deleted this record', null=True)),
                ('adjustment_number', models.CharField(help_text='Adjustment number', max_length=50, unique=True)),
                ('adjustment_date', models.DateField(help_text='Adjustment date')),
                ('adjustment_type', models.CharField(choices=[('INCREASE', 'Increase'), ('DECREASE', 'Decrease'), ('DAMAGE', 'Damage'), ('THEFT', 'Theft/Loss'), ('EXPIRY', 'Expiry'), ('OBSOLETE', 'Obsolete'), ('CORRECTION', 'Correction')], help_text='Type of adjustment', max_length=20)),
                ('reason', models.TextField(help_text='Reason for adjustment')),
                ('approved_at', models.DateTimeField(blank=True, help_text='Approval timestamp', null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SUBMITTED', 'Submitted'), ('APPROVED', 'Approved'), ('POSTED', 'Posted to Stock'), ('REJECTED', 'Rejected'), ('CANCELLED', 'Cancelled')], default='DRAFT', help_text='Status', max_length=20)),
                ('total_value_impact', models.DecimalField(blank=True, decimal_places=2, help_text='Total value impact', max_digits=15, null=True)),
                ('attachments', models.JSONField(blank=True, help_text='Attachments (file paths)', null=True)),
                ('remarks', models.TextField(blank=True, help_text='Remarks', null=True)),
                ('approved_by', models.ForeignKey(blank=True, help_text='Approved by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='adjustments_approved', to=settings.AUTH_USER_MODEL)),
                ('factory', models.ForeignKey(help_text='Factory', on_delete=django.db.models.deletion.PROTECT, related_name='inventory_adjustments', to='core.factory')),
                ('performed_by', models.ForeignKey(help_text='Performed by', on_delete=django.db.models.deletion.PROTECT, related_name='adjustments_performed', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Inventory Adjustment',
                'verbose_name_plural': 'Inventory Adjustments',
                'db_table': 'inventory_adjustments',
                'ordering': ['-adjustment_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InventoryAdjustmentLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('serial_no', models.CharField(blank=True, help_text='Serial number', max_length=50, null=True)),
                ('system_qty', models.DecimalField(decimal_places=3, help_text='System quantity before adjustment', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('adjusted_qty', models.DecimalField(decimal_places=3, help_text='Quantity after adjustment', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('variance_qty', models.DecimalField(decimal_places=3, help_text='Variance (adjusted - system)', max_digits=15)),
                ('unit_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Unit cost', max_digits=15, null=True)),
                ('value_impact', models.DecimalField(blank=True, decimal_places=2, help_text='Value impact (variance Ã— cost)', max_digits=15, null=True)),
                ('reason', models.TextField(blank=True, help_text='Reason', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('adjustment', models.ForeignKey(help_text='Inventory adjustment', on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='production.inventoryadjustment')),
                ('batch', models.ForeignKey(blank=True, help_text='Stock batch', null=True, on_delete=django.db.models.deletion.SET_NULL, to='procurement.stockbatch')),
                ('item', models.ForeignKey(help_text='Item', on_delete=django.db.models.deletion.PROTECT, related_name='adjustment_lines', to='inventory.item')),
                ('location', models.ForeignKey(help_text='Location', on_delete=django.db.models.deletion.PROTECT, to='core.location')),
                ('uom', models.ForeignKey(help_text='Unit of measurement', on_delete=django.db.models.deletion.PROTECT, to='inventory.unitofmeasurement')),
            ],
            options={
                'verbose_name': 'Inventory Adjustment Line',
                'verbose_name_plural': 'Inventory Adjustment Lines',
                'db_table': 'inventory_adjustment_lines',
            },
        ),
        migrations.CreateModel(
            name='StockIssue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier (UUID)', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when record was last updated')),
                ('created_by', models.UUIDField(blank=True, help_text='User who created this record', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User who last updated this record', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when record was soft-deleted', null=True)),
                ('deleted_by', models.UUIDField(blank=True, help_text='User who deleted this record', null=True)),
                ('issue_number', models.CharField(help_text='Issue number', max_length=50, unique=True)),
                ('issue_date', models.DateField(help_text='Issue date')),
                ('received_by_name', models.CharField(blank=True, help_text='Person who received items', max_length=100, null=True)),
                ('received_by_signature', models.TextField(blank=True, help_text='Digital signature', null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SUBMITTED', 'Submitted'), ('APPROVED', 'Approved'), ('ISSUED', 'Issued'), ('CANCELLED', 'Cancelled')], default='DRAFT', help_text='Status', max_length=20)),
                ('remarks', models.TextField(blank=True, help_text='Remarks', null=True)),
                ('approved_by', models.ForeignKey(blank=True, help_text='Approved by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_issues_approved', to=settings.AUTH_USER_MODEL)),
                ('department', models.ForeignKey(help_text='Department', on_delete=django.db.models.deletion.PROTECT, related_name='stock_issues', to='core.department')),
                ('factory', models.ForeignKey(help_text='Factory', on_delete=django.db.models.deletion.PROTECT, related_name='stock_issues', to='core.factory')),
                ('issued_by', models.ForeignKey(help_text='Issued by', on_delete=django.db.models.deletion.PROTECT, related_name='stock_issues_issued', to=settings.AUTH_USER_MODEL)),
                ('requisition', models.ForeignKey(blank=True, help_text='Source requisition', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_issues', to='production.internalrequisition')),
            ],
            options={
                'verbose_name': 'Stock Issue',
                'verbose_name_plural': 'Stock Issues',
                'db_table': 'stock_issues',
                'ordering': ['-issue_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StockIssueLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('serial_no', models.CharField(blank=True, help_text='Serial number', max_length=50, null=True)),
                ('issued_qty', models.DecimalField(decimal_places=3, help_text='Issued quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(0.001)])),
                ('unit_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Unit cost', max_digits=15, null=True)),
                ('total_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Total cost', max_digits=15, null=True)),
                ('remarks', models.TextField(blank=True, help_text='Remarks', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('batch', models.ForeignKey(blank=True, help_text='Stock batch', null=True, on_delete=django.db.models.deletion.SET_NULL, to='procurement.stockbatch')),
                ('issue', models.ForeignKey(help_text='Stock issue', on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='production.stockissue')),
                ('item', models.ForeignKey(help_text='Item', on_delete=django.db.models.deletion.PROTECT, related_name='issue_lines', to='inventory.item')),
                ('location', models.ForeignKey(help_text='Source location', on_delete=django.db.models.deletion.PROTECT, to='core.location')),
                ('requisition_line', models.ForeignKey(blank=True, help_text='Source requisition line', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='issue_lines', to='production.internalrequisitionline')),
                ('uom', models.ForeignKey(help_text='Unit of measurement', on_delete=django.db.models.deletion.PROTECT, to='inventory.unitofmeasurement')),
            ],
            options={
                'verbose_name': 'Stock Issue Line',
                'verbose_name_plural': 'Stock Issue Lines',
                'db_table': 'stock_issue_lines',
            },
        ),
        migrations.CreateModel(
            name='StocktakeSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier (UUID)', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when record was last updated')),
                ('created_by', models.UUIDField(blank=True, help_text='User who created this record', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User who last updated this record', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when record was soft-deleted', null=True)),
                ('deleted_by', models.UUIDField(blank=True, help_text='User who deleted this record', null=True)),
                ('stocktake_number', models.CharField(help_text='Stocktake number', max_length=50, unique=True)),
                ('stocktake_type', models.CharField(choices=[('FULL', 'Full Stocktake'), ('CYCLE', 'Cycle Count'), ('SPOT', 'Spot Check')], default='FULL', help_text='Type of stocktake', max_length=20)),
                ('start_date', models.DateField(help_text='Start date')),
                ('end_date', models.DateField(blank=True, help_text='End date', null=True)),
                ('scheduled_date', models.DateField(blank=True, help_text='Scheduled date', null=True)),
                ('status', models.CharField(choices=[('PLANNED', 'Planned'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('APPROVED', 'Approved'), ('CANCELLED', 'Cancelled')], default='PLANNED', help_text='Status', max_length=20)),
                ('approved_at', models.DateTimeField(blank=True, help_text='Approval timestamp', null=True)),
                ('remarks', models.TextField(blank=True, help_text='Remarks', null=True)),
                ('approved_by', models.ForeignKey(blank=True, help_text='Approved by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stocktakes_approved', to=settings.AUTH_USER_MODEL)),
                ('factory', models.ForeignKey(help_text='Factory', on_delete=django.db.models.deletion.PROTECT, related_name='stocktake_sessions', to='core.factory')),
                ('location', models.ForeignKey(blank=True, help_text='Location (NULL for full factory)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='stocktake_sessions', to='core.location')),
            ],
            options={
                'verbose_name': 'Stocktake Session',
                'verbose_name_plural': 'Stocktake Sessions',
                'db_table': 'stocktake_sessions',
                'ordering': ['-start_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StocktakeLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('serial_no', models.CharField(blank=True, help_text='Serial number', max_length=50, null=True)),
                ('system_qty', models.DecimalField(decimal_places=3, help_text='System quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('counted_qty', models.DecimalField(blank=True, decimal_places=3, help_text='Counted quantity', max_digits=15, null=True)),
                ('variance_qty', models.DecimalField(blank=True, decimal_places=3, help_text='Variance (counted - system)', max_digits=15, null=True)),
                ('counted_at', models.DateTimeField(blank=True, help_text='Count timestamp', null=True)),
                ('verified_at', models.DateTimeField(blank=True, help_text='Verification timestamp', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COUNTED', 'Counted'), ('VERIFIED', 'Verified'), ('ADJUSTED', 'Adjusted')], default='PENDING', help_text='Line status', max_length=20)),
                ('remarks', models.TextField(blank=True, help_text='Remarks', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('batch', models.ForeignKey(blank=True, help_text='Stock batch', null=True, on_delete=django.db.models.deletion.SET_NULL, to='procurement.stockbatch')),
                ('counted_by', models.ForeignKey(blank=True, help_text='Counted by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stocktake_counted', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(help_text='Item', on_delete=django.db.models.deletion.PROTECT, related_name='stocktake_lines', to='inventory.item')),
                ('location', models.ForeignKey(help_text='Location', on_delete=django.db.models.deletion.PROTECT, to='core.location')),
                ('uom', models.ForeignKey(help_text='Unit of measurement', on_delete=django.db.models.deletion.PROTECT, to='inventory.unitofmeasurement')),
                ('verified_by', models.ForeignKey(blank=True, help_text='Verified by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stocktake_verified', to=settings.AUTH_USER_MODEL)),
                ('stocktake', models.ForeignKey(help_text='Stocktake session', on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='production.stocktakesession')),
            ],
            options={
                'verbose_name': 'Stocktake Line',
                'verbose_name_plural': 'Stocktake Lines',
                'db_table': 'stocktake_lines',
            },
        ),
        migrations.CreateModel(
            name='StockTransfer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier (UUID)', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when record was last updated')),
                ('created_by', models.UUIDField(blank=True, help_text='User who created this record', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User who last updated this record', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when record was soft-deleted', null=True)),
                ('deleted_by', models.UUIDField(blank=True, help_text='User who deleted this record', null=True)),
                ('transfer_number', models.CharField(help_text='Transfer number', max_length=50, unique=True)),
                ('transfer_date', models.DateField(help_text='Transfer date')),
                ('transfer_type', models.CharField(choices=[('INTERNAL', 'Internal (Same Factory)'), ('INTER_FACTORY', 'Inter-Factory'), ('INTER_LOCATION', 'Inter-Location')], default='INTERNAL', help_text='Transfer type', max_length=20)),
                ('received_at', models.DateTimeField(blank=True, help_text='Receipt timestamp', null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SUBMITTED', 'Submitted'), ('APPROVED', 'Approved'), ('IN_TRANSIT', 'In Transit'), ('RECEIVED', 'Received'), ('CANCELLED', 'Cancelled')], default='DRAFT', help_text='Status', max_length=20)),
                ('vehicle_no', models.CharField(blank=True, help_text='Vehicle number', max_length=50, null=True)),
                ('driver_name', models.CharField(blank=True, help_text='Driver name', max_length=100, null=True)),
                ('remarks', models.TextField(blank=True, help_text='Remarks', null=True)),
                ('approved_by', models.ForeignKey(blank=True, help_text='Approved by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transfers_approved', to=settings.AUTH_USER_MODEL)),
                ('from_factory', models.ForeignKey(blank=True, help_text='From factory', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='transfers_from', to='core.factory')),
                ('from_location', models.ForeignKey(help_text='From location', on_delete=django.db.models.deletion.PROTECT, related_name='transfers_from', to='core.location')),
                ('received_by', models.ForeignKey(blank=True, help_text='Received by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transfers_received', to=settings.AUTH_USER_MODEL)),
                ('requested_by', models.ForeignKey(blank=True, help_text='Requested by', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='transfers_requested', to=settings.AUTH_USER_MODEL)),
                ('sent_by', models.ForeignKey(blank=True, help_text='Sent by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transfers_sent', to=settings.AUTH_USER_MODEL)),
                ('to_factory', models.ForeignKey(blank=True, help_text='To factory', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='transfers_to', to='core.factory')),
                ('to_location', models.ForeignKey(help_text='To location', on_delete=django.db.models.deletion.PROTECT, related_name='transfers_to', to='core.location')),
            ],
            options={
                'verbose_name': 'Stock Transfer',
                'verbose_name_plural': 'Stock Transfers',
                'db_table': 'stock_transfers',
                'ordering': ['-transfer_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StockTransferLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('serial_no', models.CharField(blank=True, help_text='Serial number', max_length=50, null=True)),
                ('transferred_qty', models.DecimalField(decimal_places=3, help_text='Transferred quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(0.001)])),
                ('received_qty', models.DecimalField(blank=True, decimal_places=3, help_text='Received quantity', max_digits=15, null=True)),
                ('remarks', models.TextField(blank=True, help_text='Remarks', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('batch', models.ForeignKey(blank=True, help_text='Stock batch', null=True, on_delete=django.db.models.deletion.SET_NULL, to='procurement.stockbatch')),
                ('item', models.ForeignKey(help_text='Item', on_delete=django.db.models.deletion.PROTECT, related_name='transfer_lines', to='inventory.item')),
                ('transfer', models.ForeignKey(help_text='Stock transfer', on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='production.stocktransfer')),
                ('uom', models.ForeignKey(help_text='Unit of measurement', on_delete=django.db.models.deletion.PROTECT, to='inventory.unitofmeasurement')),
            ],
            options={
                'verbose_name': 'Stock Transfer Line',
                'verbose_name_plural': 'Stock Transfer Lines',
                'db_table': 'stock_transfer_lines',
            },
        ),
        migrations.CreateModel(
            name='WorkOrder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier (UUID)', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when record was last updated')),
                ('created_by', models.UUIDField(blank=True, help_text='User who created this record', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User who last updated this record', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when record was soft-deleted', null=True)),
                ('deleted_by', models.UUIDField(blank=True, help_text='User who deleted this record', null=True)),
                ('wo_number', models.CharField(help_text='Work order number', max_length=50, unique=True)),
                ('po_number', models.CharField(help_text="Buyer's PO number", max_length=100)),
                ('order_date', models.DateField(help_text='Order date')),
                ('delivery_date', models.DateField(help_text='Delivery date')),
                ('order_qty', models.IntegerField(help_text='Total order quantity', validators=[django.core.validators.MinValueValidator(1)])),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='PENDING', help_text='Work order status', max_length=20)),
                ('remarks', models.TextField(blank=True, help_text='Remarks', null=True)),
                ('buyer', models.ForeignKey(help_text='Buyer', on_delete=django.db.models.deletion.PROTECT, related_name='work_orders', to='inventory.buyer')),
                ('factory', models.ForeignKey(help_text='Factory', on_delete=django.db.models.deletion.PROTECT, related_name='work_orders', to='core.factory')),
                ('style', models.ForeignKey(help_text='Style', on_delete=django.db.models.deletion.PROTECT, related_name='work_orders', to='inventory.style')),
            ],
            options={
                'verbose_name': 'Work Order',
                'verbose_name_plural': 'Work Orders',
                'db_table': 'work_orders',
                'ordering': ['-order_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkOrderAccessoryRequirement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('required_qty', models.DecimalField(decimal_places=3, help_text='Required quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(0.001)])),
                ('allocated_qty', models.DecimalField(decimal_places=3, default=0, help_text='Allocated quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('issued_qty', models.DecimalField(decimal_places=3, default=0, help_text='Issued quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('color', models.ForeignKey(blank=True, help_text='Color', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.color')),
                ('item', models.ForeignKey(help_text='Accessory item', on_delete=django.db.models.deletion.PROTECT, related_name='wo_accessory_requirements', to='inventory.item')),
                ('size', models.ForeignKey(blank=True, help_text='Size', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.size')),
                ('uom', models.ForeignKey(help_text='Unit of measurement', on_delete=django.db.models.deletion.PROTECT, to='inventory.unitofmeasurement')),
                ('work_order', models.ForeignKey(help_text='Work order', on_delete=django.db.models.deletion.CASCADE, related_name='accessory_requirements', to='production.workorder')),
            ],
            options={
                'verbose_name': 'WO Accessory Requirement',
                'verbose_name_plural': 'WO Accessory Requirements',
                'db_table': 'wo_accessories_requirements',
            },
        ),
        migrations.CreateModel(
            name='WorkOrderColorBreakdown',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.IntegerField(help_text='Quantity for this color', validators=[django.core.validators.MinValueValidator(1)])),
                ('color', models.ForeignKey(help_text='Color', on_delete=django.db.models.deletion.PROTECT, to='inventory.color')),
                ('work_order', models.ForeignKey(help_text='Work order', on_delete=django.db.models.deletion.CASCADE, related_name='color_breakdowns', to='production.workorder')),
            ],
            options={
                'verbose_name': 'WO Color Breakdown',
                'verbose_name_plural': 'WO Color Breakdowns',
                'db_table': 'wo_color_breakdowns',
            },
        ),
        migrations.CreateModel(
            name='WorkOrderSizeBreakdown',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.IntegerField(help_text='Quantity for this size', validators=[django.core.validators.MinValueValidator(1)])),
                ('size', models.ForeignKey(help_text='Size', on_delete=django.db.models.deletion.PROTECT, to='inventory.size')),
                ('work_order', models.ForeignKey(help_text='Work order', on_delete=django.db.models.deletion.CASCADE, related_name='size_breakdowns', to='production.workorder')),
            ],
            options={
                'verbose_name': 'WO Size Breakdown',
                'verbose_name_plural': 'WO Size Breakdowns',
                'db_table': 'wo_size_breakdowns',
            },
        ),
        migrations.CreateModel(
            name='WorkOrderYarnRequirement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('required_qty', models.DecimalField(decimal_places=3, help_text='Required quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(0.001)])),
                ('allocated_qty', models.DecimalField(decimal_places=3, default=0, help_text='Allocated quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('issued_qty', models.DecimalField(decimal_places=3, default=0, help_text='Issued quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(help_text='Yarn item', on_delete=django.db.models.deletion.PROTECT, related_name='wo_yarn_requirements', to='inventory.item')),
                ('uom', models.ForeignKey(help_text='Unit of measurement', on_delete=django.db.models.deletion.PROTECT, to='inventory.unitofmeasurement')),
                ('work_order', models.ForeignKey(help_text='Work order', on_delete=django.db.models.deletion.CASCADE, related_name='yarn_requirements', to='production.workorder')),
            ],
            options={
                'verbose_name': 'WO Yarn Requirement',
                'verbose_name_plural': 'WO Yarn Requirements',
                'db_table': 'wo_yarn_requirements',
            },
        ),
        migrations.AddIndex(
            model_name='internalrequisition',
            index=models.Index(fields=['requisition_number'], name='internal_re_requisi_1b88f6_idx'),
        ),
        migrations.AddIndex(
            model_name='internalrequisition',
            index=models.Index(fields=['department', 'status'], name='internal_re_departm_d51812_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryadjustment',
            index=models.Index(fields=['adjustment_number'], name='inventory_a_adjustm_d0c48a_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryadjustment',
            index=models.Index(fields=['factory', 'status'], name='inventory_a_factory_51fe48_idx'),
        ),
        migrations.AddIndex(
            model_name='stockissue',
            index=models.Index(fields=['issue_number'], name='stock_issue_issue_n_d9c3b2_idx'),
        ),
        migrations.AddIndex(
            model_name='stockissue',
            index=models.Index(fields=['department', 'status'], name='stock_issue_departm_fc4c3e_idx'),
        ),
        migrations.AddIndex(
            model_name='stocktakesession',
            index=models.Index(fields=['stocktake_number'], name='stocktake_s_stockta_610e0f_idx'),
        ),
        migrations.AddIndex(
            model_name='stocktakesession',
            index=models.Index(fields=['factory', 'status'], name='stocktake_s_factory_0e3d12_idx'),
        ),
        migrations.AddIndex(
            model_name='stocktransfer',
            index=models.Index(fields=['transfer_number'], name='stock_trans_transfe_2376ec_idx'),
        ),
        migrations.AddIndex(
            model_name='stocktransfer',
            index=models.Index(fields=['from_location', 'to_location'], name='stock_trans_from_lo_01f084_idx'),
        ),
        migrations.AddIndex(
            model_name='workorder',
            index=models.Index(fields=['wo_number'], name='work_orders_wo_numb_9821e1_idx'),
        ),
        migrations.AddIndex(
            model_name='workorder',
            index=models.Index(fields=['buyer', 'status'], name='work_orders_buyer_i_92f346_idx'),
        ),
        migrations.AddIndex(
            model_name='workorder',
            index=models.Index(fields=['factory', 'status'], name='work_orders_factory_1066b0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workordercolorbreakdown',
            unique_together={('work_order', 'color')},
        ),
        migrations.AlterUniqueTogether(
            name='workordersizebreakdown',
            unique_together={('work_order', 'size')},
        ),
    ]
