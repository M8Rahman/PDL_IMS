# Generated by Django 5.0.1 on 2025-10-22 05:26

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier (UUID)', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when record was last updated')),
                ('created_by', models.UUIDField(blank=True, help_text='User who created this record', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User who last updated this record', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when record was soft-deleted', null=True)),
                ('deleted_by', models.UUIDField(blank=True, help_text='User who deleted this record', null=True)),
                ('role_name', models.CharField(help_text='Unique role name', max_length=50, unique=True)),
                ('description', models.TextField(blank=True, help_text='Role description', null=True)),
                ('is_system_role', models.BooleanField(default=False, help_text='System role (cannot be modified/deleted)')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
                'db_table': 'roles',
                'ordering': ['role_name'],
            },
        ),
        migrations.CreateModel(
            name='StoreType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('store_code', models.CharField(help_text='Unique store code', max_length=50, unique=True)),
                ('store_name', models.CharField(help_text='Store name', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Store description', null=True)),
                ('icon', models.CharField(blank=True, help_text='Icon identifier for UI', max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is store type active?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Store Type',
                'verbose_name_plural': 'Store Types',
                'db_table': 'store_types',
                'ordering': ['store_name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(help_text='Unique username for login', max_length=50, unique=True, validators=[django.core.validators.RegexValidator(message='Username must contain only letters, numbers, and underscores.', regex='^[a-zA-Z0-9_]+$')])),
                ('email', models.EmailField(help_text='Email address', max_length=254, unique=True)),
                ('password', models.CharField(help_text='Hashed password', max_length=255)),
                ('full_name', models.CharField(help_text='Full name of the user', max_length=100)),
                ('employee_id', models.CharField(blank=True, help_text='Employee ID from HR system', max_length=50, null=True, unique=True)),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=20, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is user account active?')),
                ('is_staff', models.BooleanField(default=False, help_text='Can user access admin site?')),
                ('must_change_password', models.BooleanField(default=False, help_text='Must user change password on next login?')),
                ('last_login_at', models.DateTimeField(blank=True, help_text='Last login timestamp', null=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, help_text='IP address of last login', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.UUIDField(blank=True, null=True)),
                ('updated_by', models.UUIDField(blank=True, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_by', models.UUIDField(blank=True, null=True)),
                ('department', models.ForeignKey(blank=True, help_text='Department assignment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='core.department')),
                ('factory', models.ForeignKey(blank=True, help_text='Primary factory assignment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='core.factory')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
                'ordering': ['username'],
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier (UUID)', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when record was last updated')),
                ('created_by', models.UUIDField(blank=True, help_text='User who created this record', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User who last updated this record', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when record was soft-deleted', null=True)),
                ('deleted_by', models.UUIDField(blank=True, help_text='User who deleted this record', null=True)),
                ('permission_key', models.CharField(help_text="Unique permission key (e.g., 'approve_po')", max_length=100, unique=True)),
                ('module', models.CharField(choices=[('PROCUREMENT', 'Procurement'), ('INVENTORY', 'Inventory'), ('PRODUCTION', 'Production'), ('QUALITY', 'Quality Control'), ('REPORTS', 'Reports'), ('ADMIN', 'Administration')], help_text='Module this permission belongs to', max_length=50)),
                ('module_code', models.CharField(blank=True, help_text="Specific module code (e.g., 'YARN_STORE')", max_length=50, null=True)),
                ('description', models.TextField(blank=True, help_text='Permission description', null=True)),
                ('requires_approval', models.BooleanField(default=False, help_text='Does this action require approval?')),
                ('approval_threshold', models.DecimalField(blank=True, decimal_places=2, help_text='Value threshold requiring approval', max_digits=15, null=True)),
            ],
            options={
                'verbose_name': 'Permission',
                'verbose_name_plural': 'Permissions',
                'db_table': 'permissions',
                'ordering': ['module', 'permission_key'],
                'indexes': [models.Index(fields=['permission_key'], name='permissions_permiss_0ae711_idx'), models.Index(fields=['module'], name='permissions_module_2c0512_idx')],
            },
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_permissions', to='users.permission')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_permissions', to='users.role')),
            ],
            options={
                'verbose_name': 'Role Permission',
                'verbose_name_plural': 'Role Permissions',
                'db_table': 'role_permissions',
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('assigned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_roles', to=settings.AUTH_USER_MODEL)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_roles', to='users.role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_roles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Role',
                'verbose_name_plural': 'User Roles',
                'db_table': 'user_roles',
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_token', models.CharField(help_text='Session token', max_length=255, unique=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='Browser user agent', null=True)),
                ('login_at', models.DateTimeField(auto_now_add=True, help_text='Login timestamp')),
                ('last_activity_at', models.DateTimeField(auto_now=True, help_text='Last activity timestamp')),
                ('logout_at', models.DateTimeField(blank=True, help_text='Logout timestamp', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is session active?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Session',
                'verbose_name_plural': 'User Sessions',
                'db_table': 'user_sessions',
                'ordering': ['-login_at'],
            },
        ),
        migrations.CreateModel(
            name='UserStoreAccess',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('can_view', models.BooleanField(default=True)),
                ('can_create', models.BooleanField(default=False)),
                ('can_update', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=False)),
                ('can_approve', models.BooleanField(default=False)),
                ('can_issue', models.BooleanField(default=False)),
                ('can_receive', models.BooleanField(default=False)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('assigned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_store_access', to=settings.AUTH_USER_MODEL)),
                ('factory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='store_access', to='core.factory')),
                ('store_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_access', to='users.storetype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='store_access', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Store Access',
                'verbose_name_plural': 'User Store Access',
                'db_table': 'user_store_access',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='users_usernam_baeb4b_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_email_4b85f2_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['employee_id'], name='users_employe_55e465_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['factory', 'is_active'], name='users_factory_f622ea_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='rolepermission',
            unique_together={('role', 'permission')},
        ),
        migrations.AlterUniqueTogether(
            name='userrole',
            unique_together={('user', 'role')},
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['user', 'is_active'], name='user_sessio_user_id_bb1b83_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['session_token'], name='user_sessio_session_baddb8_idx'),
        ),
        migrations.AddIndex(
            model_name='userstoreaccess',
            index=models.Index(fields=['user', 'store_type'], name='user_store__user_id_fe0b07_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userstoreaccess',
            unique_together={('user', 'store_type', 'factory')},
        ),
    ]
